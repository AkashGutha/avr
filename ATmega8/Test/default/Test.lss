
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  0000036c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800096  00800096  00000436  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000436  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000bf  00000000  00000000  00000456  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000022d  00000000  00000000  00000515  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000119  00000000  00000000  00000742  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000233  00000000  00000000  0000085b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00000a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000104  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	46 c1       	rjmp	.+652    	; 0x2a4 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e6       	ldi	r30, 0x6C	; 108
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a6 39       	cpi	r26, 0x96	; 150
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a6 e9       	ldi	r26, 0x96	; 150
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 3a       	cpi	r26, 0xA2	; 162
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	1c d1       	rcall	.+568    	; 0x292 <main>
  5a:	86 c1       	rjmp	.+780    	; 0x368 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <port_init>:
unsigned char rx_pos = 0;

unsigned char buf[10] = {};

void port_init()
{
  5e:	df 93       	push	r29
  60:	cf 93       	push	r28
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
	DDRC = 0x3F;
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	8f e3       	ldi	r24, 0x3F	; 63
  6c:	80 83       	st	Z, r24
	PORTC = 2;
  6e:	e5 e3       	ldi	r30, 0x35	; 53
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	82 e0       	ldi	r24, 0x02	; 2
  74:	80 83       	st	Z, r24
}
  76:	cf 91       	pop	r28
  78:	df 91       	pop	r29
  7a:	08 95       	ret

0000007c <uart_init>:

void uart_init()
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	UCSRA = (1<<U2X);
  84:	eb e2       	ldi	r30, 0x2B	; 43
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	80 83       	st	Z, r24
	UCSRB = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN);	// |(1<<TXCIE)
  8c:	ea e2       	ldi	r30, 0x2A	; 42
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	88 e9       	ldi	r24, 0x98	; 152
  92:	80 83       	st	Z, r24
	UBRRH = 0x02;
  94:	e0 e4       	ldi	r30, 0x40	; 64
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	80 83       	st	Z, r24
	UBRRL = 0x70;
  9c:	e9 e2       	ldi	r30, 0x29	; 41
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 e7       	ldi	r24, 0x70	; 112
  a2:	80 83       	st	Z, r24
}
  a4:	cf 91       	pop	r28
  a6:	df 91       	pop	r29
  a8:	08 95       	ret

000000aa <send_message>:

void send_message(char *msg)
{
  aa:	df 93       	push	r29
  ac:	cf 93       	push	r28
  ae:	00 d0       	rcall	.+0      	; 0xb0 <send_message+0x6>
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	9a 83       	std	Y+2, r25	; 0x02
  b6:	89 83       	std	Y+1, r24	; 0x01
	strcpy(tx_buffer, msg);
  b8:	80 e6       	ldi	r24, 0x60	; 96
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	29 81       	ldd	r18, Y+1	; 0x01
  be:	3a 81       	ldd	r19, Y+2	; 0x02
  c0:	b9 01       	movw	r22, r18
  c2:	4b d1       	rcall	.+662    	; 0x35a <strcpy>
	tx_pos = 0;
  c4:	10 92 96 00 	sts	0x0096, r1
	do
	{
		UDR = tx_buffer[tx_pos];
  c8:	ac e2       	ldi	r26, 0x2C	; 44
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	80 91 96 00 	lds	r24, 0x0096
  d0:	88 2f       	mov	r24, r24
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	fc 01       	movw	r30, r24
  d6:	e0 5a       	subi	r30, 0xA0	; 160
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	80 81       	ld	r24, Z
  dc:	8c 93       	st	X, r24
  de:	01 c0       	rjmp	.+2      	; 0xe2 <send_message+0x38>
		while ( !( UCSRA & (1<<UDRE)) )
			__asm__ volatile("nop");		// so the endless loop isn't optimized away
  e0:	00 00       	nop
	strcpy(tx_buffer, msg);
	tx_pos = 0;
	do
	{
		UDR = tx_buffer[tx_pos];
		while ( !( UCSRA & (1<<UDRE)) )
  e2:	eb e2       	ldi	r30, 0x2B	; 43
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	88 2f       	mov	r24, r24
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	80 72       	andi	r24, 0x20	; 32
  ee:	90 70       	andi	r25, 0x00	; 0
  f0:	00 97       	sbiw	r24, 0x00	; 0
  f2:	b1 f3       	breq	.-20     	; 0xe0 <send_message+0x36>
			__asm__ volatile("nop");		// so the endless loop isn't optimized away
		tx_pos++;
  f4:	80 91 96 00 	lds	r24, 0x0096
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	80 93 96 00 	sts	0x0096, r24
	}
	while( (tx_buffer[tx_pos-1] != '.') && (tx_pos < 16) );
  fe:	80 91 96 00 	lds	r24, 0x0096
 102:	88 2f       	mov	r24, r24
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	fc 01       	movw	r30, r24
 10a:	e0 5a       	subi	r30, 0xA0	; 160
 10c:	ff 4f       	sbci	r31, 0xFF	; 255
 10e:	80 81       	ld	r24, Z
 110:	8e 32       	cpi	r24, 0x2E	; 46
 112:	21 f0       	breq	.+8      	; 0x11c <send_message+0x72>
 114:	80 91 96 00 	lds	r24, 0x0096
 118:	80 31       	cpi	r24, 0x10	; 16
 11a:	b0 f2       	brcs	.-84     	; 0xc8 <send_message+0x1e>
}
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	cf 91       	pop	r28
 122:	df 91       	pop	r29
 124:	08 95       	ret

00000126 <Connect>:

void Connect()
{
 126:	df 93       	push	r29
 128:	cf 93       	push	r28
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
	if(strcmp(rx_buffer, "hello") == 0)
 12e:	80 e7       	ldi	r24, 0x70	; 112
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	20 e8       	ldi	r18, 0x80	; 128
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	b9 01       	movw	r22, r18
 138:	07 d1       	rcall	.+526    	; 0x348 <strcmp>
 13a:	00 97       	sbiw	r24, 0x00	; 0
 13c:	39 f4       	brne	.+14     	; 0x14c <Connect+0x26>
	{
		PORTC = 1;
 13e:	e5 e3       	ldi	r30, 0x35	; 53
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 83       	st	Z, r24
		send_message("world.");
 146:	86 e8       	ldi	r24, 0x86	; 134
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	af df       	rcall	.-162    	; 0xaa <send_message>
	}
}
 14c:	cf 91       	pop	r28
 14e:	df 91       	pop	r29
 150:	08 95       	ret

00000152 <Disconnect>:

void Disconnect()
{
 152:	df 93       	push	r29
 154:	cf 93       	push	r28
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
	if(strcmp(rx_buffer, "bye") == 0)
 15a:	80 e7       	ldi	r24, 0x70	; 112
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	2d e8       	ldi	r18, 0x8D	; 141
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	b9 01       	movw	r22, r18
 164:	f1 d0       	rcall	.+482    	; 0x348 <strcmp>
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	39 f4       	brne	.+14     	; 0x178 <Disconnect+0x26>
	{
		PORTC = 2;
 16a:	e5 e3       	ldi	r30, 0x35	; 53
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	80 83       	st	Z, r24
		send_message("bye.");
 172:	81 e9       	ldi	r24, 0x91	; 145
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	99 df       	rcall	.-206    	; 0xaa <send_message>
	}
}
 178:	cf 91       	pop	r28
 17a:	df 91       	pop	r29
 17c:	08 95       	ret

0000017e <HexToByte>:

char HexToByte(char *str, char start, char count)
{
 17e:	df 93       	push	r29
 180:	cf 93       	push	r28
 182:	00 d0       	rcall	.+0      	; 0x184 <HexToByte+0x6>
 184:	00 d0       	rcall	.+0      	; 0x186 <HexToByte+0x8>
 186:	00 d0       	rcall	.+0      	; 0x188 <HexToByte+0xa>
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	9c 83       	std	Y+4, r25	; 0x04
 18e:	8b 83       	std	Y+3, r24	; 0x03
 190:	6d 83       	std	Y+5, r22	; 0x05
 192:	4e 83       	std	Y+6, r20	; 0x06
	unsigned char i = 0;
 194:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char j = 0;
 196:	19 82       	std	Y+1, r1	; 0x01
	for(i = start; i <= start + count; i += 2)
 198:	8d 81       	ldd	r24, Y+5	; 0x05
 19a:	8a 83       	std	Y+2, r24	; 0x02
 19c:	2e c0       	rjmp	.+92     	; 0x1fa <HexToByte+0x7c>
	{
		buf[j] = (str[i] - 48) * 16 + (str[i+1] - 48);
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	48 2f       	mov	r20, r24
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	8a 81       	ldd	r24, Y+2	; 0x02
 1a6:	28 2f       	mov	r18, r24
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	8b 81       	ldd	r24, Y+3	; 0x03
 1ac:	9c 81       	ldd	r25, Y+4	; 0x04
 1ae:	fc 01       	movw	r30, r24
 1b0:	e2 0f       	add	r30, r18
 1b2:	f3 1f       	adc	r31, r19
 1b4:	80 81       	ld	r24, Z
 1b6:	88 2f       	mov	r24, r24
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	c0 97       	sbiw	r24, 0x30	; 48
 1bc:	82 95       	swap	r24
 1be:	92 95       	swap	r25
 1c0:	90 7f       	andi	r25, 0xF0	; 240
 1c2:	98 27       	eor	r25, r24
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	98 27       	eor	r25, r24
 1c8:	68 2f       	mov	r22, r24
 1ca:	8a 81       	ldd	r24, Y+2	; 0x02
 1cc:	88 2f       	mov	r24, r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	9c 01       	movw	r18, r24
 1d2:	2f 5f       	subi	r18, 0xFF	; 255
 1d4:	3f 4f       	sbci	r19, 0xFF	; 255
 1d6:	8b 81       	ldd	r24, Y+3	; 0x03
 1d8:	9c 81       	ldd	r25, Y+4	; 0x04
 1da:	fc 01       	movw	r30, r24
 1dc:	e2 0f       	add	r30, r18
 1de:	f3 1f       	adc	r31, r19
 1e0:	80 81       	ld	r24, Z
 1e2:	86 0f       	add	r24, r22
 1e4:	80 53       	subi	r24, 0x30	; 48
 1e6:	fa 01       	movw	r30, r20
 1e8:	e8 56       	subi	r30, 0x68	; 104
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	80 83       	st	Z, r24
		j++;
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	8f 5f       	subi	r24, 0xFF	; 255
 1f2:	89 83       	std	Y+1, r24	; 0x01

char HexToByte(char *str, char start, char count)
{
	unsigned char i = 0;
	unsigned char j = 0;
	for(i = start; i <= start + count; i += 2)
 1f4:	8a 81       	ldd	r24, Y+2	; 0x02
 1f6:	8e 5f       	subi	r24, 0xFE	; 254
 1f8:	8a 83       	std	Y+2, r24	; 0x02
 1fa:	8a 81       	ldd	r24, Y+2	; 0x02
 1fc:	48 2f       	mov	r20, r24
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	8d 81       	ldd	r24, Y+5	; 0x05
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	8e 81       	ldd	r24, Y+6	; 0x06
 208:	88 2f       	mov	r24, r24
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	82 0f       	add	r24, r18
 20e:	93 1f       	adc	r25, r19
 210:	84 17       	cp	r24, r20
 212:	95 07       	cpc	r25, r21
 214:	24 f6       	brge	.-120    	; 0x19e <HexToByte+0x20>
	{
		buf[j] = (str[i] - 48) * 16 + (str[i+1] - 48);
		j++;
	}
	return j;
 216:	89 81       	ldd	r24, Y+1	; 0x01
}
 218:	26 96       	adiw	r28, 0x06	; 6
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	de bf       	out	0x3e, r29	; 62
 220:	0f be       	out	0x3f, r0	; 63
 222:	cd bf       	out	0x3d, r28	; 61
 224:	cf 91       	pop	r28
 226:	df 91       	pop	r29
 228:	08 95       	ret

0000022a <SetData>:
// s<nn><cccccc><kkkk>
// nn     = index,    2 bytes
// cccccc = IR code,  6 bytes
// kkkk   = key code, 4 bytes
void SetData()
{
 22a:	df 93       	push	r29
 22c:	cf 93       	push	r28
 22e:	0f 92       	push	r0
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
	char i = HexToByte(rx_buffer, 3, 6);
 234:	80 e7       	ldi	r24, 0x70	; 112
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	63 e0       	ldi	r22, 0x03	; 3
 23a:	46 e0       	ldi	r20, 0x06	; 6
 23c:	a0 df       	rcall	.-192    	; 0x17e <HexToByte>
 23e:	89 83       	std	Y+1, r24	; 0x01
}
 240:	0f 90       	pop	r0
 242:	cf 91       	pop	r28
 244:	df 91       	pop	r29
 246:	08 95       	ret

00000248 <receive_message>:

void receive_message()
{
 248:	df 93       	push	r29
 24a:	cf 93       	push	r28
 24c:	00 d0       	rcall	.+0      	; 0x24e <receive_message+0x6>
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62
	switch( rx_buffer[0] )
 252:	80 91 70 00 	lds	r24, 0x0070
 256:	28 2f       	mov	r18, r24
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	3a 83       	std	Y+2, r19	; 0x02
 25c:	29 83       	std	Y+1, r18	; 0x01
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	9a 81       	ldd	r25, Y+2	; 0x02
 262:	88 36       	cpi	r24, 0x68	; 104
 264:	91 05       	cpc	r25, r1
 266:	59 f0       	breq	.+22     	; 0x27e <receive_message+0x36>
 268:	29 81       	ldd	r18, Y+1	; 0x01
 26a:	3a 81       	ldd	r19, Y+2	; 0x02
 26c:	23 37       	cpi	r18, 0x73	; 115
 26e:	31 05       	cpc	r19, r1
 270:	51 f0       	breq	.+20     	; 0x286 <receive_message+0x3e>
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	9a 81       	ldd	r25, Y+2	; 0x02
 276:	82 36       	cpi	r24, 0x62	; 98
 278:	91 05       	cpc	r25, r1
 27a:	19 f0       	breq	.+6      	; 0x282 <receive_message+0x3a>
 27c:	05 c0       	rjmp	.+10     	; 0x288 <receive_message+0x40>
	{
		case 'h': Connect(); break;
 27e:	53 df       	rcall	.-346    	; 0x126 <Connect>
 280:	03 c0       	rjmp	.+6      	; 0x288 <receive_message+0x40>
		case 'b': Disconnect(); break;
 282:	67 df       	rcall	.-306    	; 0x152 <Disconnect>
 284:	01 c0       	rjmp	.+2      	; 0x288 <receive_message+0x40>
		case 's': SetData(); break;
 286:	d1 df       	rcall	.-94     	; 0x22a <SetData>
		default : break;
	}
}
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	cf 91       	pop	r28
 28e:	df 91       	pop	r29
 290:	08 95       	ret

00000292 <main>:
//*************************************************************
//*******************        MAIN           *******************
//*************************************************************

int main()
{
 292:	df 93       	push	r29
 294:	cf 93       	push	r28
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
	port_init();
 29a:	e1 de       	rcall	.-574    	; 0x5e <port_init>
	uart_init();
 29c:	ef de       	rcall	.-546    	; 0x7c <uart_init>
	sei();
 29e:	78 94       	sei

	while (1)
	{
		__asm__ volatile("nop");		// so the endless loop isn't optimized away
 2a0:	00 00       	nop
 2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <main+0xe>

000002a4 <__vector_11>:
//*************************************************************
//*******************      END  MAIN        *******************
//*************************************************************

ISR(USART_RXC_vect)
{
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	4f 93       	push	r20
 2b4:	5f 93       	push	r21
 2b6:	6f 93       	push	r22
 2b8:	7f 93       	push	r23
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	af 93       	push	r26
 2c0:	bf 93       	push	r27
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
 2c6:	df 93       	push	r29
 2c8:	cf 93       	push	r28
 2ca:	0f 92       	push	r0
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
	char data = UDR;
 2d0:	ec e2       	ldi	r30, 0x2C	; 44
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	89 83       	std	Y+1, r24	; 0x01
	if( data != '.' )
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	8e 32       	cpi	r24, 0x2E	; 46
 2dc:	b1 f0       	breq	.+44     	; 0x30a <__vector_11+0x66>
	{
		rx_buffer[rx_pos] = data;
 2de:	80 91 97 00 	lds	r24, 0x0097
 2e2:	88 2f       	mov	r24, r24
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	fc 01       	movw	r30, r24
 2e8:	e0 59       	subi	r30, 0x90	; 144
 2ea:	ff 4f       	sbci	r31, 0xFF	; 255
 2ec:	89 81       	ldd	r24, Y+1	; 0x01
 2ee:	80 83       	st	Z, r24
		(rx_pos == 15) ? rx_pos = 0 : rx_pos++;	// should NEVER EVER EVER happen.
 2f0:	80 91 97 00 	lds	r24, 0x0097
 2f4:	8f 30       	cpi	r24, 0x0F	; 15
 2f6:	19 f4       	brne	.+6      	; 0x2fe <__vector_11+0x5a>
 2f8:	10 92 97 00 	sts	0x0097, r1
 2fc:	11 c0       	rjmp	.+34     	; 0x320 <__vector_11+0x7c>
 2fe:	80 91 97 00 	lds	r24, 0x0097
 302:	8f 5f       	subi	r24, 0xFF	; 255
 304:	80 93 97 00 	sts	0x0097, r24
 308:	0b c0       	rjmp	.+22     	; 0x320 <__vector_11+0x7c>
	}
	else
	{
		rx_buffer[rx_pos] = 0;
 30a:	80 91 97 00 	lds	r24, 0x0097
 30e:	88 2f       	mov	r24, r24
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	fc 01       	movw	r30, r24
 314:	e0 59       	subi	r30, 0x90	; 144
 316:	ff 4f       	sbci	r31, 0xFF	; 255
 318:	10 82       	st	Z, r1
		rx_pos = 0;
 31a:	10 92 97 00 	sts	0x0097, r1
		receive_message();
 31e:	94 df       	rcall	.-216    	; 0x248 <receive_message>
	}
}
 320:	0f 90       	pop	r0
 322:	cf 91       	pop	r28
 324:	df 91       	pop	r29
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	bf 91       	pop	r27
 32c:	af 91       	pop	r26
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	7f 91       	pop	r23
 334:	6f 91       	pop	r22
 336:	5f 91       	pop	r21
 338:	4f 91       	pop	r20
 33a:	3f 91       	pop	r19
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <strcmp>:
 348:	fb 01       	movw	r30, r22
 34a:	dc 01       	movw	r26, r24
 34c:	8d 91       	ld	r24, X+
 34e:	01 90       	ld	r0, Z+
 350:	80 19       	sub	r24, r0
 352:	01 10       	cpse	r0, r1
 354:	d9 f3       	breq	.-10     	; 0x34c <strcmp+0x4>
 356:	99 0b       	sbc	r25, r25
 358:	08 95       	ret

0000035a <strcpy>:
 35a:	fb 01       	movw	r30, r22
 35c:	dc 01       	movw	r26, r24
 35e:	01 90       	ld	r0, Z+
 360:	0d 92       	st	X+, r0
 362:	00 20       	and	r0, r0
 364:	e1 f7       	brne	.-8      	; 0x35e <strcpy+0x4>
 366:	08 95       	ret

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
