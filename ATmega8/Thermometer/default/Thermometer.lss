
Thermometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000382  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000003f6  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000017f  00000000  00000000  00000436  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000873  00000000  00000000  000005b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002f1  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000747  00000000  00000000  00001119  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000140  00000000  00000000  00001860  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000271  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002ab  00000000  00000000  00001c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	36 c0       	rjmp	.+108    	; 0x7e <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	93 d0       	rcall	.+294    	; 0x16a <main>
  44:	9c c1       	rjmp	.+824    	; 0x37e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <port_init>:

int abs  (int i); // to avoid warning 

void port_init(void)
{
	PORTB = 0xFF;
  48:	8f ef       	ldi	r24, 0xFF	; 255
  4a:	88 bb       	out	0x18, r24	; 24
	DDRB  = 0x00;
  4c:	17 ba       	out	0x17, r1	; 23
	PORTC = 0x71; 
  4e:	91 e7       	ldi	r25, 0x71	; 113
  50:	95 bb       	out	0x15, r25	; 21
	DDRC  = 0x0E;
  52:	9e e0       	ldi	r25, 0x0E	; 14
  54:	94 bb       	out	0x14, r25	; 20
	PORTD = 0xFF;
  56:	82 bb       	out	0x12, r24	; 18
	DDRD  = 0x00;
  58:	11 ba       	out	0x11, r1	; 17
}
  5a:	08 95       	ret

0000005c <timer1_init>:
// WGM: 0) Normal, TOP=0xFFFF
// desired value: 1Sec
// actual value:  1,000Sec (0,0%)
void timer1_init(void)
{
	TCCR1B = 0x00; //stop
  5c:	1e bc       	out	0x2e, r1	; 46
	TCNT1H = 0xF0; //setup
  5e:	80 ef       	ldi	r24, 0xF0	; 240
  60:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0xBE;
  62:	8e eb       	ldi	r24, 0xBE	; 190
  64:	8c bd       	out	0x2c, r24	; 44
	OCR1AH = 0x0F;
  66:	9f e0       	ldi	r25, 0x0F	; 15
  68:	9b bd       	out	0x2b, r25	; 43
	OCR1AL = 0x42;
  6a:	82 e4       	ldi	r24, 0x42	; 66
  6c:	8a bd       	out	0x2a, r24	; 42
	OCR1BH = 0x0F;
  6e:	99 bd       	out	0x29, r25	; 41
	OCR1BL = 0x42;
  70:	88 bd       	out	0x28, r24	; 40
	ICR1H  = 0x0F;
  72:	97 bd       	out	0x27, r25	; 39
	ICR1L  = 0x42;
  74:	86 bd       	out	0x26, r24	; 38
	TCCR1A = 0x00;
  76:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x05; //start Timer
  78:	85 e0       	ldi	r24, 0x05	; 5
  7a:	8e bd       	out	0x2e, r24	; 46
}
  7c:	08 95       	ret

0000007e <__vector_8>:


ISR(TIMER1_OVF_vect)
{
  7e:	1f 92       	push	r1
  80:	0f 92       	push	r0
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	8f 93       	push	r24
	//TIMER1 has overflowed
	TCNT1H = 0xF0; //reload counter high value
  8a:	80 ef       	ldi	r24, 0xF0	; 240
  8c:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0xBE; //reload counter low value
  8e:	8e eb       	ldi	r24, 0xBE	; 190
  90:	8c bd       	out	0x2c, r24	; 44

	uint8_t static count; 

	count++;
  92:	80 91 62 00 	lds	r24, 0x0062
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	80 93 62 00 	sts	0x0062, r24
}
  9c:	8f 91       	pop	r24
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <init_devices>:

//call this routine to initialize all peripherals
void init_devices(void)
{
	//stop errant interrupts until set up
	cli(); //disable all interrupts
  a8:	f8 94       	cli

int abs  (int i); // to avoid warning 

void port_init(void)
{
	PORTB = 0xFF;
  aa:	9f ef       	ldi	r25, 0xFF	; 255
  ac:	98 bb       	out	0x18, r25	; 24
	DDRB  = 0x00;
  ae:	17 ba       	out	0x17, r1	; 23
	PORTC = 0x71; 
  b0:	81 e7       	ldi	r24, 0x71	; 113
  b2:	85 bb       	out	0x15, r24	; 21
	DDRC  = 0x0E;
  b4:	8e e0       	ldi	r24, 0x0E	; 14
  b6:	84 bb       	out	0x14, r24	; 20
	PORTD = 0xFF;
  b8:	92 bb       	out	0x12, r25	; 18
	DDRD  = 0x00;
  ba:	11 ba       	out	0x11, r1	; 17
// WGM: 0) Normal, TOP=0xFFFF
// desired value: 1Sec
// actual value:  1,000Sec (0,0%)
void timer1_init(void)
{
	TCCR1B = 0x00; //stop
  bc:	1e bc       	out	0x2e, r1	; 46
	TCNT1H = 0xF0; //setup
  be:	80 ef       	ldi	r24, 0xF0	; 240
  c0:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0xBE;
  c2:	8e eb       	ldi	r24, 0xBE	; 190
  c4:	8c bd       	out	0x2c, r24	; 44
	OCR1AH = 0x0F;
  c6:	9f e0       	ldi	r25, 0x0F	; 15
  c8:	9b bd       	out	0x2b, r25	; 43
	OCR1AL = 0x42;
  ca:	82 e4       	ldi	r24, 0x42	; 66
  cc:	8a bd       	out	0x2a, r24	; 42
	OCR1BH = 0x0F;
  ce:	99 bd       	out	0x29, r25	; 41
	OCR1BL = 0x42;
  d0:	88 bd       	out	0x28, r24	; 40
	ICR1H  = 0x0F;
  d2:	97 bd       	out	0x27, r25	; 39
	ICR1L  = 0x42;
  d4:	86 bd       	out	0x26, r24	; 38
	TCCR1A = 0x00;
  d6:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x05; //start Timer
  d8:	85 e0       	ldi	r24, 0x05	; 5
  da:	8e bd       	out	0x2e, r24	; 46
	//stop errant interrupts until set up
	cli(); //disable all interrupts
	port_init();
	timer1_init();

	MCUCR = 0x00;
  dc:	15 be       	out	0x35, r1	; 53
	GICR  = 0x00;
  de:	1b be       	out	0x3b, r1	; 59
	TIMSK = 0x05; //timer interrupt sources
  e0:	89 bf       	out	0x39, r24	; 57
	sei(); //re-enable interrupts
  e2:	78 94       	sei
	//all peripherals are now initialized
}
  e4:	08 95       	ret

000000e6 <DS1820_ReadTemperature>:


int8_t DS1820_ReadTemperature(uint8_t bus)
{
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	18 2f       	mov	r17, r24
	uint8_t tmp1;
	uint8_t tmp2;
	static uint8_t FAMILY_CODE;
    
  // Reset, presence.
  if (!OWI_DetectPresence(bus))
  ec:	a2 d0       	rcall	.+324    	; 0x232 <OWI_DetectPresence>
  ee:	88 23       	and	r24, r24
  f0:	c1 f1       	breq	.+112    	; 0x162 <DS1820_ReadTemperature+0x7c>
  {
      return -127; // Error
  }
  // Read ROM to check family code
	OWI_SendByte(OWI_ROM_READ, bus);
  f2:	83 e3       	ldi	r24, 0x33	; 51
  f4:	61 2f       	mov	r22, r17
  f6:	bc d0       	rcall	.+376    	; 0x270 <OWI_SendByte>
  FAMILY_CODE = OWI_ReceiveByte(bus); 
  f8:	81 2f       	mov	r24, r17
  fa:	d0 d0       	rcall	.+416    	; 0x29c <OWI_ReceiveByte>
  fc:	80 93 61 00 	sts	0x0061, r24

  if (!OWI_DetectPresence(bus))
 100:	81 2f       	mov	r24, r17
 102:	97 d0       	rcall	.+302    	; 0x232 <OWI_DetectPresence>
 104:	88 23       	and	r24, r24
 106:	69 f1       	breq	.+90     	; 0x162 <DS1820_ReadTemperature+0x7c>
  {
      return -127; // Error
  }
  
  OWI_SendByte(OWI_ROM_SKIP, bus);
 108:	8c ec       	ldi	r24, 0xCC	; 204
 10a:	61 2f       	mov	r22, r17
 10c:	b1 d0       	rcall	.+354    	; 0x270 <OWI_SendByte>
  // Send start conversion command.
  OWI_SendByte(OWI_START_CONVERSION, bus);
 10e:	84 e4       	ldi	r24, 0x44	; 68
 110:	61 2f       	mov	r22, r17
 112:	ae d0       	rcall	.+348    	; 0x270 <OWI_SendByte>
  // Wait until conversion is finished.
  // Bus line is held low until conversion is finished.
  while (!OWI_ReadBit(bus))
 114:	81 2f       	mov	r24, r17
 116:	6f d0       	rcall	.+222    	; 0x1f6 <OWI_ReadBit>
 118:	88 23       	and	r24, r24
 11a:	e1 f3       	breq	.-8      	; 0x114 <DS1820_ReadTemperature+0x2e>
  {
  
  }
  // Reset, presence.
  if(!OWI_DetectPresence(bus))
 11c:	81 2f       	mov	r24, r17
 11e:	89 d0       	rcall	.+274    	; 0x232 <OWI_DetectPresence>
 120:	88 23       	and	r24, r24
 122:	f9 f0       	breq	.+62     	; 0x162 <DS1820_ReadTemperature+0x7c>
  {
      return -127; // Error
  }
  
  OWI_SendByte(OWI_ROM_SKIP, bus);
 124:	8c ec       	ldi	r24, 0xCC	; 204
 126:	61 2f       	mov	r22, r17
 128:	a3 d0       	rcall	.+326    	; 0x270 <OWI_SendByte>
  // Send READ SCRATCHPAD command.
  OWI_SendByte(OWI_READ_SCRATCHPAD, bus);
 12a:	8e eb       	ldi	r24, 0xBE	; 190
 12c:	61 2f       	mov	r22, r17
 12e:	a0 d0       	rcall	.+320    	; 0x270 <OWI_SendByte>

	// Read only two first bytes (temperature low, temperature high)
  tmp1 = OWI_ReceiveByte(bus);
 130:	81 2f       	mov	r24, r17
 132:	b4 d0       	rcall	.+360    	; 0x29c <OWI_ReceiveByte>
 134:	08 2f       	mov	r16, r24
	tmp2 = OWI_ReceiveByte(bus);
 136:	81 2f       	mov	r24, r17
 138:	b1 d0       	rcall	.+354    	; 0x29c <OWI_ReceiveByte>
 13a:	98 2f       	mov	r25, r24
	
	switch(FAMILY_CODE)
 13c:	80 91 61 00 	lds	r24, 0x0061
 140:	80 31       	cpi	r24, 0x10	; 16
 142:	19 f0       	breq	.+6      	; 0x14a <DS1820_ReadTemperature+0x64>
 144:	88 32       	cpi	r24, 0x28	; 40
 146:	69 f4       	brne	.+26     	; 0x162 <DS1820_ReadTemperature+0x7c>
 148:	05 c0       	rjmp	.+10     	; 0x154 <DS1820_ReadTemperature+0x6e>
	{
     case FAMILY_DS18S20 :
     return  ((tmp2 & 0x80) | (tmp1 >> 1)); // DS18S20
 14a:	80 2f       	mov	r24, r16
 14c:	86 95       	lsr	r24
 14e:	90 78       	andi	r25, 0x80	; 128
 150:	89 2b       	or	r24, r25
 152:	08 c0       	rjmp	.+16     	; 0x164 <DS1820_ReadTemperature+0x7e>
     break;
	 
	 case FAMILY_DS18B20 :
     return  ((tmp2 << 4) | (tmp1 >> 4)); // DS18B20
 154:	89 2f       	mov	r24, r25
 156:	82 95       	swap	r24
 158:	80 7f       	andi	r24, 0xF0	; 240
 15a:	02 95       	swap	r16
 15c:	0f 70       	andi	r16, 0x0F	; 15
 15e:	80 2b       	or	r24, r16
 160:	01 c0       	rjmp	.+2      	; 0x164 <DS1820_ReadTemperature+0x7e>
 162:	81 e8       	ldi	r24, 0x81	; 129
   
     default:                            // should never go here
     return -127; // Error
    }
    
}  
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	08 95       	ret

0000016a <main>:


//
int main(void)
{
	init_devices();
 16a:	9e df       	rcall	.-196    	; 0xa8 <init_devices>

	// stdout = &mystdout; 

	// on reset all outputs set to "1".

	OWI_Init(BUSES);
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	08 d0       	rcall	.+16     	; 0x180 <OWI_Init>
	bit_set(Ind_Port, BIT(LLED));
 170:	aa 9a       	sbi	0x15, 2	; 21
	bit_set(Ind_Port, BIT(HLED));
 172:	ab 9a       	sbi	0x15, 3	; 21
	bit_set(Ind_Port, BIT(Buzzer));
 174:	a9 9a       	sbi	0x15, 1	; 21

	while(1)
	{
		temperature = DS1820_ReadTemperature(BUSES);
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	b6 df       	rcall	.-148    	; 0xe6 <DS1820_ReadTemperature>
 17a:	80 93 60 00 	sts	0x0060, r24
 17e:	fb cf       	rjmp	.-10     	; 0x176 <main+0xc>

00000180 <OWI_Init>:
 *
 *  \param  pins    A bitmask of the buses to initialize.
 */
void OWI_Init(uint8_t pins)
{
    OWI_RELEASE_BUS(pins);
 180:	94 b3       	in	r25, 0x14	; 20
 182:	80 95       	com	r24
 184:	98 23       	and	r25, r24
 186:	94 bb       	out	0x14, r25	; 20
 188:	95 b3       	in	r25, 0x15	; 21
 18a:	98 23       	and	r25, r24
 18c:	95 bb       	out	0x15, r25	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 18e:	80 ea       	ldi	r24, 0xA0	; 160
 190:	8a 95       	dec	r24
 192:	f1 f7       	brne	.-4      	; 0x190 <OWI_Init+0x10>
    // The first rising edge can be interpreted by a slave as the end of a
    // Reset pulse. Delay for the required reset recovery time (H) to be 
    // sure that the real reset is interpreted correctly.
    _delay_us(OWI_DELAY_H_STD_MODE);
}
 194:	08 95       	ret

00000196 <OWI_WriteBit1>:
void OWI_WriteBit1(uint8_t pins)
{
    uint8_t intState;
    
    // Disable interrupts.
    intState = SREG;
 196:	2f b7       	in	r18, 0x3f	; 63
    cli();
 198:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
 19a:	94 b3       	in	r25, 0x14	; 20
 19c:	98 2b       	or	r25, r24
 19e:	94 bb       	out	0x14, r25	; 20
 1a0:	95 b3       	in	r25, 0x15	; 21
 1a2:	80 95       	com	r24
 1a4:	98 23       	and	r25, r24
 1a6:	95 bb       	out	0x15, r25	; 21
 1a8:	92 e0       	ldi	r25, 0x02	; 2
 1aa:	9a 95       	dec	r25
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <OWI_WriteBit1+0x14>
    _delay_us(OWI_DELAY_A_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
 1ae:	94 b3       	in	r25, 0x14	; 20
 1b0:	98 23       	and	r25, r24
 1b2:	94 bb       	out	0x14, r25	; 20
 1b4:	95 b3       	in	r25, 0x15	; 21
 1b6:	89 23       	and	r24, r25
 1b8:	85 bb       	out	0x15, r24	; 21
 1ba:	85 e1       	ldi	r24, 0x15	; 21
 1bc:	8a 95       	dec	r24
 1be:	f1 f7       	brne	.-4      	; 0x1bc <OWI_WriteBit1+0x26>
    _delay_us(OWI_DELAY_B_STD_MODE);
    
    // Restore interrupts.
	SREG = intState;
 1c0:	2f bf       	out	0x3f, r18	; 63
    sei();
 1c2:	78 94       	sei
}
 1c4:	08 95       	ret

000001c6 <OWI_WriteBit0>:
void OWI_WriteBit0(uint8_t pins)
{
    uint8_t intState;
    
    // Disable interrupts.
    intState = SREG;
 1c6:	2f b7       	in	r18, 0x3f	; 63
    cli();
 1c8:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
 1ca:	94 b3       	in	r25, 0x14	; 20
 1cc:	98 2b       	or	r25, r24
 1ce:	94 bb       	out	0x14, r25	; 20
 1d0:	95 b3       	in	r25, 0x15	; 21
 1d2:	80 95       	com	r24
 1d4:	98 23       	and	r25, r24
 1d6:	95 bb       	out	0x15, r25	; 21
 1d8:	94 e1       	ldi	r25, 0x14	; 20
 1da:	9a 95       	dec	r25
 1dc:	f1 f7       	brne	.-4      	; 0x1da <OWI_WriteBit0+0x14>
    _delay_us(OWI_DELAY_C_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
 1de:	94 b3       	in	r25, 0x14	; 20
 1e0:	98 23       	and	r25, r24
 1e2:	94 bb       	out	0x14, r25	; 20
 1e4:	95 b3       	in	r25, 0x15	; 21
 1e6:	89 23       	and	r24, r25
 1e8:	85 bb       	out	0x15, r24	; 21
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	8a 95       	dec	r24
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <OWI_WriteBit0+0x26>
    _delay_us(OWI_DELAY_D_STD_MODE);
    
    // Restore interrupts.
   SREG = intState;
 1f0:	2f bf       	out	0x3f, r18	; 63
    sei();
 1f2:	78 94       	sei
}
 1f4:	08 95       	ret

000001f6 <OWI_ReadBit>:
{
    uint8_t intState;
    uint8_t bitsRead;
    
    // Disable interrupts.
    intState = SREG;
 1f6:	3f b7       	in	r19, 0x3f	; 63
    cli();
 1f8:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
 1fa:	94 b3       	in	r25, 0x14	; 20
 1fc:	98 2b       	or	r25, r24
 1fe:	94 bb       	out	0x14, r25	; 20
 200:	95 b3       	in	r25, 0x15	; 21
 202:	28 2f       	mov	r18, r24
 204:	20 95       	com	r18
 206:	92 23       	and	r25, r18
 208:	95 bb       	out	0x15, r25	; 21
 20a:	92 e0       	ldi	r25, 0x02	; 2
 20c:	9a 95       	dec	r25
 20e:	f1 f7       	brne	.-4      	; 0x20c <OWI_ReadBit+0x16>
    _delay_us(OWI_DELAY_A_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
 210:	94 b3       	in	r25, 0x14	; 20
 212:	92 23       	and	r25, r18
 214:	94 bb       	out	0x14, r25	; 20
 216:	95 b3       	in	r25, 0x15	; 21
 218:	29 23       	and	r18, r25
 21a:	25 bb       	out	0x15, r18	; 21
 21c:	93 e0       	ldi	r25, 0x03	; 3
 21e:	9a 95       	dec	r25
 220:	f1 f7       	brne	.-4      	; 0x21e <OWI_ReadBit+0x28>
    _delay_us(OWI_DELAY_E_STD_MODE);
    
    // Sample bus and delay.
    bitsRead = OWI_PIN & pins;
 222:	93 b3       	in	r25, 0x13	; 19
 224:	22 e1       	ldi	r18, 0x12	; 18
 226:	2a 95       	dec	r18
 228:	f1 f7       	brne	.-4      	; 0x226 <OWI_ReadBit+0x30>
    _delay_us(OWI_DELAY_F_STD_MODE);
    
    // Restore interrupts.
   SREG = intState;
 22a:	3f bf       	out	0x3f, r19	; 63
    sei();
 22c:	78 94       	sei
    
    return bitsRead;
}
 22e:	89 23       	and	r24, r25
 230:	08 95       	ret

00000232 <OWI_DetectPresence>:
{
    uint8_t intState;
    uint8_t presenceDetected;
    
    // Disable interrupts.
    intState = SREG;
 232:	3f b7       	in	r19, 0x3f	; 63
    cli();
 234:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
 236:	94 b3       	in	r25, 0x14	; 20
 238:	98 2b       	or	r25, r24
 23a:	94 bb       	out	0x14, r25	; 20
 23c:	95 b3       	in	r25, 0x15	; 21
 23e:	28 2f       	mov	r18, r24
 240:	20 95       	com	r18
 242:	92 23       	and	r25, r18
 244:	95 bb       	out	0x15, r25	; 21
 246:	90 ea       	ldi	r25, 0xA0	; 160
 248:	9a 95       	dec	r25
 24a:	f1 f7       	brne	.-4      	; 0x248 <OWI_DetectPresence+0x16>
    _delay_us(OWI_DELAY_H_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
 24c:	94 b3       	in	r25, 0x14	; 20
 24e:	92 23       	and	r25, r18
 250:	94 bb       	out	0x14, r25	; 20
 252:	95 b3       	in	r25, 0x15	; 21
 254:	29 23       	and	r18, r25
 256:	25 bb       	out	0x15, r18	; 21
 258:	97 e1       	ldi	r25, 0x17	; 23
 25a:	9a 95       	dec	r25
 25c:	f1 f7       	brne	.-4      	; 0x25a <OWI_DetectPresence+0x28>
    _delay_us(OWI_DELAY_I_STD_MODE);
    
    // Sample bus to detect presence signal and delay.
    presenceDetected = ((~OWI_PIN) & pins);
 25e:	93 b3       	in	r25, 0x13	; 19
 260:	28 e8       	ldi	r18, 0x88	; 136
 262:	2a 95       	dec	r18
 264:	f1 f7       	brne	.-4      	; 0x262 <OWI_DetectPresence+0x30>
    _delay_us(OWI_DELAY_J_STD_MODE);
    
    // Restore interrupts.
	SREG = intState;
 266:	3f bf       	out	0x3f, r19	; 63
    sei();
 268:	78 94       	sei
 26a:	90 95       	com	r25
    
    return presenceDetected;
}
 26c:	89 23       	and	r24, r25
 26e:	08 95       	ret

00000270 <OWI_SendByte>:
 *  \param  data    The data to send on the bus(es).
 *  
 *  \param  pins    A bitmask of the buses to send the data to.
 */
void OWI_SendByte(uint8_t data, uint8_t pins)
{
 270:	ff 92       	push	r15
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	08 2f       	mov	r16, r24
 278:	f6 2e       	mov	r15, r22
 27a:	10 e0       	ldi	r17, 0x00	; 0
    for (i = 0; i < 8; i++)
    {
        // Determine if lsb is '0' or '1' and transmit corresponding
        // waveform on the bus.
        temp = data & 0x01;
        if (temp)
 27c:	00 ff       	sbrs	r16, 0
 27e:	03 c0       	rjmp	.+6      	; 0x286 <OWI_SendByte+0x16>
        {
            OWI_WriteBit1(pins);
 280:	8f 2d       	mov	r24, r15
 282:	89 df       	rcall	.-238    	; 0x196 <OWI_WriteBit1>
 284:	02 c0       	rjmp	.+4      	; 0x28a <OWI_SendByte+0x1a>
        }
        else
        {
            OWI_WriteBit0(pins);
 286:	8f 2d       	mov	r24, r15
 288:	9e df       	rcall	.-196    	; 0x1c6 <OWI_WriteBit0>
{
    uint8_t temp;
    uint8_t i;
    
    // Do once for each bit
    for (i = 0; i < 8; i++)
 28a:	1f 5f       	subi	r17, 0xFF	; 255
 28c:	18 30       	cpi	r17, 0x08	; 8
 28e:	11 f0       	breq	.+4      	; 0x294 <OWI_SendByte+0x24>
        else
        {
            OWI_WriteBit0(pins);
        }
        // Right shift the data to get next bit.
        data >>= 1;
 290:	06 95       	lsr	r16
 292:	f4 cf       	rjmp	.-24     	; 0x27c <OWI_SendByte+0xc>
    }
}
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	ff 90       	pop	r15
 29a:	08 95       	ret

0000029c <OWI_ReceiveByte>:
 *  \param  pin     A bitmask of the bus to read from.
 *  
 *  \return     The byte read from the bus.
 */
uint8_t OWI_ReceiveByte(uint8_t pin)
{
 29c:	ff 92       	push	r15
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	f8 2e       	mov	r15, r24
 2a4:	10 e0       	ldi	r17, 0x00	; 0
 2a6:	00 e0       	ldi	r16, 0x00	; 0
    
    // Do once for each bit
    for (i = 0; i < 8; i++)
    {
        // Shift temporary input variable right.
        data >>= 1;
 2a8:	16 95       	lsr	r17
        // Set the msb if a '1' value is read from the bus.
        // Leave as it is ('0') else.
        if (OWI_ReadBit(pin))
 2aa:	8f 2d       	mov	r24, r15
 2ac:	a4 df       	rcall	.-184    	; 0x1f6 <OWI_ReadBit>
 2ae:	81 11       	cpse	r24, r1
        {
            // Set msb
            data |= 0x80;
 2b0:	10 68       	ori	r17, 0x80	; 128

    // Clear the temporary input variable.
    data = 0x00;
    
    // Do once for each bit
    for (i = 0; i < 8; i++)
 2b2:	0f 5f       	subi	r16, 0xFF	; 255
 2b4:	08 30       	cpi	r16, 0x08	; 8
 2b6:	c1 f7       	brne	.-16     	; 0x2a8 <OWI_ReceiveByte+0xc>
            // Set msb
            data |= 0x80;
        }
    }
    return data;
}
 2b8:	81 2f       	mov	r24, r17
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	08 95       	ret

000002c2 <OWI_SkipRom>:
/*! \brief  Sends the SKIP ROM command to the 1-Wire bus(es).
 *
 *  \param  pins    A bitmask of the buses to send the SKIP ROM command to.
 */
void OWI_SkipRom(uint8_t pins)
{
 2c2:	68 2f       	mov	r22, r24
    // Send the SKIP ROM command on the bus.
    OWI_SendByte(OWI_ROM_SKIP, pins);
 2c4:	8c ec       	ldi	r24, 0xCC	; 204
 2c6:	d4 df       	rcall	.-88     	; 0x270 <OWI_SendByte>
}
 2c8:	08 95       	ret

000002ca <OWI_ReadRom>:
 *  \param  romValue    A pointer where the id will be placed.
 *
 *  \param  pin     A bitmask of the bus to read from.
 */
void OWI_ReadRom(uint8_t * romValue, uint8_t pin)
{
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	ec 01       	movw	r28, r24
 2d4:	06 2f       	mov	r16, r22
    uint8_t bytesLeft = 8;

    // Send the READ ROM command on the bus.
    OWI_SendByte(OWI_ROM_READ, pin);
 2d6:	83 e3       	ldi	r24, 0x33	; 51
 2d8:	cb df       	rcall	.-106    	; 0x270 <OWI_SendByte>
 2da:	18 e0       	ldi	r17, 0x08	; 8
    
    // Do 8 times.
    while (bytesLeft > 0)
    {
        // Place the received data in memory.
        *romValue++ = OWI_ReceiveByte(pin);
 2dc:	80 2f       	mov	r24, r16
 2de:	de df       	rcall	.-68     	; 0x29c <OWI_ReceiveByte>
 2e0:	89 93       	st	Y+, r24
        bytesLeft--;
 2e2:	11 50       	subi	r17, 0x01	; 1

    // Send the READ ROM command on the bus.
    OWI_SendByte(OWI_ROM_READ, pin);
    
    // Do 8 times.
    while (bytesLeft > 0)
 2e4:	d9 f7       	brne	.-10     	; 0x2dc <OWI_ReadRom+0x12>
    {
        // Place the received data in memory.
        *romValue++ = OWI_ReceiveByte(pin);
        bytesLeft--;
    }
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	08 95       	ret

000002f0 <OWI_ComputeCRC8>:
 *  \note   Constantly passing the return value of this function 
 *          As the seed argument computes the CRC8 value of a
 *          longer string of data.
 */
uint8_t OWI_ComputeCRC8(uint8_t inData, uint8_t seed)
{
 2f0:	28 2f       	mov	r18, r24
 2f2:	98 e0       	ldi	r25, 0x08	; 8
        {
            seed >>= 1;
        }
        else
        {
            seed ^= 0x18;
 2f4:	38 e1       	ldi	r19, 0x18	; 24
    uint8_t temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
    {
        temp = ((seed ^ inData) & 0x01);
        if (temp == 0)
 2f6:	86 2f       	mov	r24, r22
 2f8:	82 27       	eor	r24, r18
 2fa:	80 fd       	sbrc	r24, 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <OWI_ComputeCRC8+0x12>
        {
            seed >>= 1;
 2fe:	66 95       	lsr	r22
 300:	03 c0       	rjmp	.+6      	; 0x308 <OWI_ComputeCRC8+0x18>
        }
        else
        {
            seed ^= 0x18;
 302:	63 27       	eor	r22, r19
            seed >>= 1;
 304:	66 95       	lsr	r22
            seed |= 0x80;
 306:	60 68       	ori	r22, 0x80	; 128
uint8_t OWI_ComputeCRC8(uint8_t inData, uint8_t seed)
{
    uint8_t bitsLeft;
    uint8_t temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
 308:	91 50       	subi	r25, 0x01	; 1
 30a:	11 f0       	breq	.+4      	; 0x310 <OWI_ComputeCRC8+0x20>
        {
            seed ^= 0x18;
            seed >>= 1;
            seed |= 0x80;
        }
        inData >>= 1;
 30c:	26 95       	lsr	r18
 30e:	f3 cf       	rjmp	.-26     	; 0x2f6 <OWI_ComputeCRC8+0x6>
    }
    return seed;    
}
 310:	86 2f       	mov	r24, r22
 312:	08 95       	ret

00000314 <OWI_ComputeCRC16>:
 *  \note   Constantly passing the return value of this function 
 *          As the seed argument computes the CRC16 value of a
 *          longer string of data.
 */
uint16_t OWI_ComputeCRC16(uint8_t inData, uint16_t seed)
{
 314:	28 2f       	mov	r18, r24
 316:	98 e0       	ldi	r25, 0x08	; 8
        {
            seed >>= 1;
        }
        else
        {
            seed ^= 0x4002;
 318:	42 e0       	ldi	r20, 0x02	; 2
 31a:	50 e4       	ldi	r21, 0x40	; 64
    uint8_t temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
    {
        temp = ((seed ^ inData) & 0x01);
        if (temp == 0)
 31c:	82 2f       	mov	r24, r18
 31e:	86 27       	eor	r24, r22
 320:	80 fd       	sbrc	r24, 0
 322:	03 c0       	rjmp	.+6      	; 0x32a <OWI_ComputeCRC16+0x16>
        {
            seed >>= 1;
 324:	76 95       	lsr	r23
 326:	67 95       	ror	r22
 328:	05 c0       	rjmp	.+10     	; 0x334 <OWI_ComputeCRC16+0x20>
        }
        else
        {
            seed ^= 0x4002;
 32a:	64 27       	eor	r22, r20
 32c:	75 27       	eor	r23, r21
            seed >>= 1;
 32e:	76 95       	lsr	r23
 330:	67 95       	ror	r22
            seed |= 0x8000;
 332:	70 68       	ori	r23, 0x80	; 128
uint16_t OWI_ComputeCRC16(uint8_t inData, uint16_t seed)
{
    uint8_t bitsLeft;
    uint8_t temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
 334:	91 50       	subi	r25, 0x01	; 1
 336:	11 f0       	breq	.+4      	; 0x33c <OWI_ComputeCRC16+0x28>
        {
            seed ^= 0x4002;
            seed >>= 1;
            seed |= 0x8000;
        }
        inData >>= 1;
 338:	26 95       	lsr	r18
 33a:	f0 cf       	rjmp	.-32     	; 0x31c <OWI_ComputeCRC16+0x8>
    }
    return seed;    
}
 33c:	cb 01       	movw	r24, r22
 33e:	08 95       	ret

00000340 <OWI_CheckRomCRC>:
 *
 *  \retval OWI_CRC_OK      The CRC's matched.
 *  \retval OWI_CRC_ERROR   There was a discrepancy between the calculated and the stored CRC.
 */
uint8_t OWI_CheckRomCRC(uint8_t * romValue)
{
 340:	dc 01       	movw	r26, r24
 342:	fc 01       	movw	r30, r24
 344:	40 e0       	ldi	r20, 0x00	; 0
 346:	20 e0       	ldi	r18, 0x00	; 0
        {
            seed >>= 1;
        }
        else
        {
            seed ^= 0x18;
 348:	58 e1       	ldi	r21, 0x18	; 24
    uint8_t i;
    uint8_t crc8 = 0;
    
    for (i = 0; i < 7; i++)
    {
        crc8 = OWI_ComputeCRC8(*romValue, crc8);
 34a:	30 81       	ld	r19, Z
 34c:	98 e0       	ldi	r25, 0x08	; 8
    uint8_t temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
    {
        temp = ((seed ^ inData) & 0x01);
        if (temp == 0)
 34e:	83 2f       	mov	r24, r19
 350:	82 27       	eor	r24, r18
 352:	80 fd       	sbrc	r24, 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <OWI_CheckRomCRC+0x1a>
        {
            seed >>= 1;
 356:	26 95       	lsr	r18
 358:	03 c0       	rjmp	.+6      	; 0x360 <OWI_CheckRomCRC+0x20>
        }
        else
        {
            seed ^= 0x18;
 35a:	25 27       	eor	r18, r21
            seed >>= 1;
            seed |= 0x80;
 35c:	26 95       	lsr	r18
 35e:	20 68       	ori	r18, 0x80	; 128
uint8_t OWI_ComputeCRC8(uint8_t inData, uint8_t seed)
{
    uint8_t bitsLeft;
    uint8_t temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
 360:	91 50       	subi	r25, 0x01	; 1
 362:	11 f0       	breq	.+4      	; 0x368 <OWI_CheckRomCRC+0x28>
        {
            seed ^= 0x18;
            seed >>= 1;
            seed |= 0x80;
        }
        inData >>= 1;
 364:	36 95       	lsr	r19
 366:	f3 cf       	rjmp	.-26     	; 0x34e <OWI_CheckRomCRC+0xe>
    uint8_t crc8 = 0;
    
    for (i = 0; i < 7; i++)
    {
        crc8 = OWI_ComputeCRC8(*romValue, crc8);
        romValue++;
 368:	31 96       	adiw	r30, 0x01	; 1
uint8_t OWI_CheckRomCRC(uint8_t * romValue)
{
    uint8_t i;
    uint8_t crc8 = 0;
    
    for (i = 0; i < 7; i++)
 36a:	4f 5f       	subi	r20, 0xFF	; 255
 36c:	47 30       	cpi	r20, 0x07	; 7
 36e:	69 f7       	brne	.-38     	; 0x34a <OWI_CheckRomCRC+0xa>
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	17 96       	adiw	r26, 0x07	; 7
 374:	8c 91       	ld	r24, X
 376:	28 13       	cpse	r18, r24
 378:	91 e0       	ldi	r25, 0x01	; 1
    if (crc8 == (*romValue))
    {
        return OWI_CRC_OK;
    }
    return OWI_CRC_ERROR;
}
 37a:	89 2f       	mov	r24, r25
 37c:	08 95       	ret

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
