
bin\Debug\Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000d4c  00000de0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800120  00800120  00000e00  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000206  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e2  00000000  00000000  00001046  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000222  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000833  00000000  00000000  0000184a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00002080  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ef  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	7d c4       	rjmp	.+2298   	; 0x900 <__vector_2>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	f7 c4       	rjmp	.+2542   	; 0x9f8 <__vector_4>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	65 c5       	rjmp	.+2762   	; 0xae2 <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ec e4       	ldi	r30, 0x4C	; 76
  48:	fd e0       	ldi	r31, 0x0D	; 13
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a0 32       	cpi	r26, 0x20	; 32
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 e2       	ldi	r26, 0x20	; 32
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ad 32       	cpi	r26, 0x2D	; 45
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	c6 d3       	rcall	.+1932   	; 0x7f4 <main>
  68:	6f c6       	rjmp	.+3294   	; 0xd48 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <delay>:
#include "ds1307.h"

char TWI_S = 0;      // TWI Status

void delay(int cycles)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <delay+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	9a 83       	std	Y+2, r25	; 0x02
  78:	89 83       	std	Y+1, r24	; 0x01
  7a:	05 c0       	rjmp	.+10     	; 0x86 <delay+0x1a>
  while(cycles > 0)
    cycles--;
  7c:	89 81       	ldd	r24, Y+1	; 0x01
  7e:	9a 81       	ldd	r25, Y+2	; 0x02
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	9a 83       	std	Y+2, r25	; 0x02
  84:	89 83       	std	Y+1, r24	; 0x01

char TWI_S = 0;      // TWI Status

void delay(int cycles)
{
  while(cycles > 0)
  86:	89 81       	ldd	r24, Y+1	; 0x01
  88:	9a 81       	ldd	r25, Y+2	; 0x02
  8a:	18 16       	cp	r1, r24
  8c:	19 06       	cpc	r1, r25
  8e:	b4 f3       	brlt	.-20     	; 0x7c <delay+0x10>
    cycles--;
}
  90:	0f 90       	pop	r0
  92:	0f 90       	pop	r0
  94:	cf 91       	pop	r28
  96:	df 91       	pop	r29
  98:	08 95       	ret

0000009a <twi_start>:

// ================= INITIALIZATION ==================

char twi_start()
{
  9a:	df 93       	push	r29
  9c:	cf 93       	push	r28
  9e:	0f 92       	push	r0
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);   // Send START condition
  a4:	ec eb       	ldi	r30, 0xBC	; 188
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	84 ea       	ldi	r24, 0xA4	; 164
  aa:	80 83       	st	Z, r24
  while (!(TWCR & (1<<TWINT)));             // Wait for TWINT flag set. This indicates that the START condition has been transmitted
  ac:	ec eb       	ldi	r30, 0xBC	; 188
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	88 23       	and	r24, r24
  b4:	dc f7       	brge	.-10     	; 0xac <twi_start+0x12>
  TWI_S = (TWSR & 0xF8);
  b6:	e9 eb       	ldi	r30, 0xB9	; 185
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	88 7f       	andi	r24, 0xF8	; 248
  be:	80 93 20 01 	sts	0x0120, r24
  if ((TWI_S != START) && (TWI_S != RESTART))  // Check value of TWI Status Register. Mask prescaler bits. 
  c2:	80 91 20 01 	lds	r24, 0x0120
  c6:	88 30       	cpi	r24, 0x08	; 8
  c8:	39 f0       	breq	.+14     	; 0xd8 <twi_start+0x3e>
  ca:	80 91 20 01 	lds	r24, 0x0120
  ce:	80 31       	cpi	r24, 0x10	; 16
  d0:	19 f0       	breq	.+6      	; 0xd8 <twi_start+0x3e>
    return 1;                                // If status different from START go to ERROR
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	89 83       	std	Y+1, r24	; 0x01
  d6:	01 c0       	rjmp	.+2      	; 0xda <twi_start+0x40>
  else
    return 0;
  d8:	19 82       	std	Y+1, r1	; 0x01
  da:	89 81       	ldd	r24, Y+1	; 0x01
}
  dc:	0f 90       	pop	r0
  de:	cf 91       	pop	r28
  e0:	df 91       	pop	r29
  e2:	08 95       	ret

000000e4 <twi_stop>:

char twi_stop()
{
  e4:	df 93       	push	r29
  e6:	cf 93       	push	r28
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  ec:	ec eb       	ldi	r30, 0xBC	; 188
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	84 e9       	ldi	r24, 0x94	; 148
  f2:	80 83       	st	Z, r24
  //delay(20);
  return 0;
  f4:	80 e0       	ldi	r24, 0x00	; 0
}
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	08 95       	ret

000000fc <rtc_set_address>:

char rtc_set_address(char addr)
{
  fc:	df 93       	push	r29
  fe:	cf 93       	push	r28
 100:	00 d0       	rcall	.+0      	; 0x102 <rtc_set_address+0x6>
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	89 83       	std	Y+1, r24	; 0x01
  if(twi_set_write() != 0)
 108:	36 d1       	rcall	.+620    	; 0x376 <twi_set_write>
 10a:	88 23       	and	r24, r24
 10c:	19 f0       	breq	.+6      	; 0x114 <rtc_set_address+0x18>
    return 1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	8a 83       	std	Y+2, r24	; 0x02
 112:	03 c0       	rjmp	.+6      	; 0x11a <rtc_set_address+0x1e>
  twi_write(addr);
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	5a d1       	rcall	.+692    	; 0x3cc <twi_write>
  return 0;
 118:	1a 82       	std	Y+2, r1	; 0x02
 11a:	8a 81       	ldd	r24, Y+2	; 0x02
}
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	cf 91       	pop	r28
 122:	df 91       	pop	r29
 124:	08 95       	ret

00000126 <twi_set_read>:

// =============== READING ====================

char twi_set_read()
{
 126:	df 93       	push	r29
 128:	cf 93       	push	r28
 12a:	0f 92       	push	r0
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
  if(twi_start() != 0)
 130:	b4 df       	rcall	.-152    	; 0x9a <twi_start>
 132:	88 23       	and	r24, r24
 134:	19 f0       	breq	.+6      	; 0x13c <twi_set_read+0x16>
    return 1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	89 83       	std	Y+1, r24	; 0x01
 13a:	1b c0       	rjmp	.+54     	; 0x172 <twi_set_read+0x4c>
  
  TWDR = SLA_R;                             // Load slave address (SLA) + read bit(R) into TWDR Register.
 13c:	eb eb       	ldi	r30, 0xBB	; 187
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	81 ed       	ldi	r24, 0xD1	; 209
 142:	80 83       	st	Z, r24
  TWCR = (1<<TWINT) | (1<<TWEN);            // Clear TWINT bit in TWCR to start transmission of address
 144:	ec eb       	ldi	r30, 0xBC	; 188
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	84 e8       	ldi	r24, 0x84	; 132
 14a:	80 83       	st	Z, r24
  while (!(TWCR & (1<<TWINT)));             // Wait for TWINT flag set. This indicates that the SLA+W has been transmitted, and ACK/NACK has been received.
 14c:	ec eb       	ldi	r30, 0xBC	; 188
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	88 23       	and	r24, r24
 154:	dc f7       	brge	.-10     	; 0x14c <twi_set_read+0x26>
  TWI_S = (TWSR & 0xF8);
 156:	e9 eb       	ldi	r30, 0xB9	; 185
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	88 7f       	andi	r24, 0xF8	; 248
 15e:	80 93 20 01 	sts	0x0120, r24
  if (TWI_S != MR_SLA_ACK)          // Check value of TWI Status Register. Mask prescaler bits.
 162:	80 91 20 01 	lds	r24, 0x0120
 166:	80 34       	cpi	r24, 0x40	; 64
 168:	19 f0       	breq	.+6      	; 0x170 <twi_set_read+0x4a>
    return 1;                                // If status different from ST_SLA_ACK go to ERROR
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	89 83       	std	Y+1, r24	; 0x01
 16e:	01 c0       	rjmp	.+2      	; 0x172 <twi_set_read+0x4c>
  else
    return 0;
 170:	19 82       	std	Y+1, r1	; 0x01
 172:	89 81       	ldd	r24, Y+1	; 0x01
}
 174:	0f 90       	pop	r0
 176:	cf 91       	pop	r28
 178:	df 91       	pop	r29
 17a:	08 95       	ret

0000017c <twi_read>:

int twi_read(char ack)
{
 17c:	df 93       	push	r29
 17e:	cf 93       	push	r28
 180:	00 d0       	rcall	.+0      	; 0x182 <twi_read+0x6>
 182:	0f 92       	push	r0
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	89 83       	std	Y+1, r24	; 0x01
  if(ack)
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	88 23       	and	r24, r24
 18e:	01 f1       	breq	.+64     	; 0x1d0 <twi_read+0x54>
  {
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);  // If NOT the last read byte, send ACK after read
 190:	ec eb       	ldi	r30, 0xBC	; 188
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	84 ec       	ldi	r24, 0xC4	; 196
 196:	80 83       	st	Z, r24

    while (!(TWCR & (1<<TWINT)));
 198:	ec eb       	ldi	r30, 0xBC	; 188
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	88 23       	and	r24, r24
 1a0:	dc f7       	brge	.-10     	; 0x198 <twi_read+0x1c>
    TWI_S = (TWSR & 0xF8);
 1a2:	e9 eb       	ldi	r30, 0xB9	; 185
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	88 7f       	andi	r24, 0xF8	; 248
 1aa:	80 93 20 01 	sts	0x0120, r24
    
    if(TWI_S != MR_DATA_ACK) 
 1ae:	80 91 20 01 	lds	r24, 0x0120
 1b2:	80 35       	cpi	r24, 0x50	; 80
 1b4:	29 f0       	breq	.+10     	; 0x1c0 <twi_read+0x44>
      return ((1<<8) | 0x00);
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	31 e0       	ldi	r19, 0x01	; 1
 1ba:	3b 83       	std	Y+3, r19	; 0x03
 1bc:	2a 83       	std	Y+2, r18	; 0x02
 1be:	27 c0       	rjmp	.+78     	; 0x20e <twi_read+0x92>
    else
      return TWDR;
 1c0:	eb eb       	ldi	r30, 0xBB	; 187
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	3b 83       	std	Y+3, r19	; 0x03
 1cc:	2a 83       	std	Y+2, r18	; 0x02
 1ce:	1f c0       	rjmp	.+62     	; 0x20e <twi_read+0x92>
  }
  else
  {
    TWCR = (1<<TWINT) | (1<<TWEN) | (0<<TWEA);  // If the last read byte, send NACK after read
 1d0:	ec eb       	ldi	r30, 0xBC	; 188
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	84 e8       	ldi	r24, 0x84	; 132
 1d6:	80 83       	st	Z, r24

    while (!(TWCR & (1<<TWINT)));
 1d8:	ec eb       	ldi	r30, 0xBC	; 188
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	88 23       	and	r24, r24
 1e0:	dc f7       	brge	.-10     	; 0x1d8 <twi_read+0x5c>
    TWI_S = (TWSR & 0xF8);
 1e2:	e9 eb       	ldi	r30, 0xB9	; 185
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	88 7f       	andi	r24, 0xF8	; 248
 1ea:	80 93 20 01 	sts	0x0120, r24
    
    if(TWI_S != MR_DATA_NACK) 
 1ee:	80 91 20 01 	lds	r24, 0x0120
 1f2:	88 35       	cpi	r24, 0x58	; 88
 1f4:	29 f0       	breq	.+10     	; 0x200 <twi_read+0x84>
      return ((1<<8) | 0x00);
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	9b 83       	std	Y+3, r25	; 0x03
 1fc:	8a 83       	std	Y+2, r24	; 0x02
 1fe:	07 c0       	rjmp	.+14     	; 0x20e <twi_read+0x92>
    else
      return TWDR;
 200:	eb eb       	ldi	r30, 0xBB	; 187
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	3b 83       	std	Y+3, r19	; 0x03
 20c:	2a 83       	std	Y+2, r18	; 0x02
 20e:	8a 81       	ldd	r24, Y+2	; 0x02
 210:	9b 81       	ldd	r25, Y+3	; 0x03
  }
}
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	cf 91       	pop	r28
 21a:	df 91       	pop	r29
 21c:	08 95       	ret

0000021e <rtc_read>:

clock_buffer rtc_read()
{
 21e:	af 92       	push	r10
 220:	bf 92       	push	r11
 222:	cf 92       	push	r12
 224:	df 92       	push	r13
 226:	ef 92       	push	r14
 228:	ff 92       	push	r15
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	df 93       	push	r29
 230:	cf 93       	push	r28
 232:	cd b7       	in	r28, 0x3d	; 61
 234:	de b7       	in	r29, 0x3e	; 62
 236:	a0 97       	sbiw	r28, 0x20	; 32
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	f8 94       	cli
 23c:	de bf       	out	0x3e, r29	; 62
 23e:	0f be       	out	0x3f, r0	; 63
 240:	cd bf       	out	0x3d, r28	; 61
  clock_buffer buf = {0};
 242:	87 e0       	ldi	r24, 0x07	; 7
 244:	fe 01       	movw	r30, r28
 246:	38 96       	adiw	r30, 0x08	; 8
 248:	df 01       	movw	r26, r30
 24a:	98 2f       	mov	r25, r24
 24c:	1d 92       	st	X+, r1
 24e:	9a 95       	dec	r25
 250:	e9 f7       	brne	.-6      	; 0x24c <rtc_read+0x2e>
 
  rtc_set_address(0x00);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	53 df       	rcall	.-346    	; 0xfc <rtc_set_address>
  
  if(twi_set_read() != 0)
 256:	67 df       	rcall	.-306    	; 0x126 <twi_set_read>
 258:	88 23       	and	r24, r24
 25a:	09 f1       	breq	.+66     	; 0x29e <rtc_read+0x80>
    return buf;
 25c:	de 01       	movw	r26, r28
 25e:	11 96       	adiw	r26, 0x01	; 1
 260:	b8 8b       	std	Y+16, r27	; 0x10
 262:	af 87       	std	Y+15, r26	; 0x0f
 264:	fe 01       	movw	r30, r28
 266:	38 96       	adiw	r30, 0x08	; 8
 268:	fa 8b       	std	Y+18, r31	; 0x12
 26a:	e9 8b       	std	Y+17, r30	; 0x11
 26c:	f7 e0       	ldi	r31, 0x07	; 7
 26e:	fb 8b       	std	Y+19, r31	; 0x13
 270:	a9 89       	ldd	r26, Y+17	; 0x11
 272:	ba 89       	ldd	r27, Y+18	; 0x12
 274:	0c 90       	ld	r0, X
 276:	e9 89       	ldd	r30, Y+17	; 0x11
 278:	fa 89       	ldd	r31, Y+18	; 0x12
 27a:	31 96       	adiw	r30, 0x01	; 1
 27c:	fa 8b       	std	Y+18, r31	; 0x12
 27e:	e9 8b       	std	Y+17, r30	; 0x11
 280:	af 85       	ldd	r26, Y+15	; 0x0f
 282:	b8 89       	ldd	r27, Y+16	; 0x10
 284:	0c 92       	st	X, r0
 286:	ef 85       	ldd	r30, Y+15	; 0x0f
 288:	f8 89       	ldd	r31, Y+16	; 0x10
 28a:	31 96       	adiw	r30, 0x01	; 1
 28c:	f8 8b       	std	Y+16, r31	; 0x10
 28e:	ef 87       	std	Y+15, r30	; 0x0f
 290:	fb 89       	ldd	r31, Y+19	; 0x13
 292:	f1 50       	subi	r31, 0x01	; 1
 294:	fb 8b       	std	Y+19, r31	; 0x13
 296:	8b 89       	ldd	r24, Y+19	; 0x13
 298:	88 23       	and	r24, r24
 29a:	51 f7       	brne	.-44     	; 0x270 <rtc_read+0x52>
 29c:	36 c0       	rjmp	.+108    	; 0x30a <rtc_read+0xec>
  
  buf.seconds = twi_read(1);
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	6d df       	rcall	.-294    	; 0x17c <twi_read>
 2a2:	88 87       	std	Y+8, r24	; 0x08
  buf.minutes = twi_read(1);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	6a df       	rcall	.-300    	; 0x17c <twi_read>
 2a8:	89 87       	std	Y+9, r24	; 0x09
  buf.hours = twi_read(1);
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	67 df       	rcall	.-306    	; 0x17c <twi_read>
 2ae:	8a 87       	std	Y+10, r24	; 0x0a
  buf.day = twi_read(1);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	64 df       	rcall	.-312    	; 0x17c <twi_read>
 2b4:	8b 87       	std	Y+11, r24	; 0x0b
  buf.date = twi_read(1);
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	61 df       	rcall	.-318    	; 0x17c <twi_read>
 2ba:	8c 87       	std	Y+12, r24	; 0x0c
  buf.month = twi_read(1);
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	5e df       	rcall	.-324    	; 0x17c <twi_read>
 2c0:	8d 87       	std	Y+13, r24	; 0x0d
  buf.year = twi_read(0);
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	5b df       	rcall	.-330    	; 0x17c <twi_read>
 2c6:	8e 87       	std	Y+14, r24	; 0x0e
  
  twi_stop();
 2c8:	0d df       	rcall	.-486    	; 0xe4 <twi_stop>
  return buf;
 2ca:	de 01       	movw	r26, r28
 2cc:	11 96       	adiw	r26, 0x01	; 1
 2ce:	bd 8b       	std	Y+21, r27	; 0x15
 2d0:	ac 8b       	std	Y+20, r26	; 0x14
 2d2:	fe 01       	movw	r30, r28
 2d4:	38 96       	adiw	r30, 0x08	; 8
 2d6:	ff 8b       	std	Y+23, r31	; 0x17
 2d8:	ee 8b       	std	Y+22, r30	; 0x16
 2da:	f7 e0       	ldi	r31, 0x07	; 7
 2dc:	f8 8f       	std	Y+24, r31	; 0x18
 2de:	ae 89       	ldd	r26, Y+22	; 0x16
 2e0:	bf 89       	ldd	r27, Y+23	; 0x17
 2e2:	0c 90       	ld	r0, X
 2e4:	ee 89       	ldd	r30, Y+22	; 0x16
 2e6:	ff 89       	ldd	r31, Y+23	; 0x17
 2e8:	31 96       	adiw	r30, 0x01	; 1
 2ea:	ff 8b       	std	Y+23, r31	; 0x17
 2ec:	ee 8b       	std	Y+22, r30	; 0x16
 2ee:	ac 89       	ldd	r26, Y+20	; 0x14
 2f0:	bd 89       	ldd	r27, Y+21	; 0x15
 2f2:	0c 92       	st	X, r0
 2f4:	ec 89       	ldd	r30, Y+20	; 0x14
 2f6:	fd 89       	ldd	r31, Y+21	; 0x15
 2f8:	31 96       	adiw	r30, 0x01	; 1
 2fa:	fd 8b       	std	Y+21, r31	; 0x15
 2fc:	ec 8b       	std	Y+20, r30	; 0x14
 2fe:	f8 8d       	ldd	r31, Y+24	; 0x18
 300:	f1 50       	subi	r31, 0x01	; 1
 302:	f8 8f       	std	Y+24, r31	; 0x18
 304:	88 8d       	ldd	r24, Y+24	; 0x18
 306:	88 23       	and	r24, r24
 308:	51 f7       	brne	.-44     	; 0x2de <rtc_read+0xc0>
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	9a 81       	ldd	r25, Y+2	; 0x02
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	2b 81       	ldd	r18, Y+3	; 0x03
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	3c 81       	ldd	r19, Y+4	; 0x04
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	4d 81       	ldd	r20, Y+5	; 0x05
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	5e 81       	ldd	r21, Y+6	; 0x06
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	6f 81       	ldd	r22, Y+7	; 0x07
 326:	89 8f       	std	Y+25, r24	; 0x19
 328:	9a 8f       	std	Y+26, r25	; 0x1a
 32a:	2b 8f       	std	Y+27, r18	; 0x1b
 32c:	3c 8f       	std	Y+28, r19	; 0x1c
 32e:	4d 8f       	std	Y+29, r20	; 0x1d
 330:	5e 8f       	std	Y+30, r21	; 0x1e
 332:	6f 8f       	std	Y+31, r22	; 0x1f
 334:	a9 8c       	ldd	r10, Y+25	; 0x19
 336:	ba 8c       	ldd	r11, Y+26	; 0x1a
 338:	cb 8c       	ldd	r12, Y+27	; 0x1b
 33a:	dc 8c       	ldd	r13, Y+28	; 0x1c
 33c:	ed 8c       	ldd	r14, Y+29	; 0x1d
 33e:	fe 8c       	ldd	r15, Y+30	; 0x1e
 340:	0f 8d       	ldd	r16, Y+31	; 0x1f
 342:	18 a1       	ldd	r17, Y+32	; 0x20
}
 344:	2a 2d       	mov	r18, r10
 346:	3b 2d       	mov	r19, r11
 348:	4c 2d       	mov	r20, r12
 34a:	5d 2d       	mov	r21, r13
 34c:	6e 2d       	mov	r22, r14
 34e:	7f 2d       	mov	r23, r15
 350:	80 2f       	mov	r24, r16
 352:	91 2f       	mov	r25, r17
 354:	a0 96       	adiw	r28, 0x20	; 32
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	de bf       	out	0x3e, r29	; 62
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	cf 91       	pop	r28
 362:	df 91       	pop	r29
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	ff 90       	pop	r15
 36a:	ef 90       	pop	r14
 36c:	df 90       	pop	r13
 36e:	cf 90       	pop	r12
 370:	bf 90       	pop	r11
 372:	af 90       	pop	r10
 374:	08 95       	ret

00000376 <twi_set_write>:

// ==================== WRITING =========================

char twi_set_write()
{
 376:	df 93       	push	r29
 378:	cf 93       	push	r28
 37a:	0f 92       	push	r0
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
  if(twi_start() != 0)
 380:	8c de       	rcall	.-744    	; 0x9a <twi_start>
 382:	88 23       	and	r24, r24
 384:	19 f0       	breq	.+6      	; 0x38c <twi_set_write+0x16>
    return 1;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	89 83       	std	Y+1, r24	; 0x01
 38a:	1b c0       	rjmp	.+54     	; 0x3c2 <twi_set_write+0x4c>
  
  TWDR = SLA_W;                             // Load slave address (SLA) + write bit(W) into TWDR Register.
 38c:	eb eb       	ldi	r30, 0xBB	; 187
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 ed       	ldi	r24, 0xD0	; 208
 392:	80 83       	st	Z, r24
  TWCR = (1<<TWINT) | (1<<TWEN);            // Clear TWINT bit in TWCR to start transmission of address
 394:	ec eb       	ldi	r30, 0xBC	; 188
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	84 e8       	ldi	r24, 0x84	; 132
 39a:	80 83       	st	Z, r24
  while (!(TWCR & (1<<TWINT)));             // Wait for TWINT flag set. This indicates that the SLA+W has been transmitted, and ACK/NACK has been received.
 39c:	ec eb       	ldi	r30, 0xBC	; 188
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	88 23       	and	r24, r24
 3a4:	dc f7       	brge	.-10     	; 0x39c <twi_set_write+0x26>
  TWI_S = (TWSR & 0xF8);
 3a6:	e9 eb       	ldi	r30, 0xB9	; 185
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	88 7f       	andi	r24, 0xF8	; 248
 3ae:	80 93 20 01 	sts	0x0120, r24
  if (TWI_S != MT_SLA_ACK)          // Check value of TWI Status Register. Mask prescaler bits.
 3b2:	80 91 20 01 	lds	r24, 0x0120
 3b6:	88 31       	cpi	r24, 0x18	; 24
 3b8:	19 f0       	breq	.+6      	; 0x3c0 <twi_set_write+0x4a>
    return 1;                                // If status different from ST_SLA_ACK go to ERROR
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	89 83       	std	Y+1, r24	; 0x01
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <twi_set_write+0x4c>
  else
    return 0;
 3c0:	19 82       	std	Y+1, r1	; 0x01
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
}
 3c4:	0f 90       	pop	r0
 3c6:	cf 91       	pop	r28
 3c8:	df 91       	pop	r29
 3ca:	08 95       	ret

000003cc <twi_write>:

char twi_write(char c)
{
 3cc:	df 93       	push	r29
 3ce:	cf 93       	push	r28
 3d0:	00 d0       	rcall	.+0      	; 0x3d2 <twi_write+0x6>
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
 3d6:	89 83       	std	Y+1, r24	; 0x01
  TWDR = c;                               // Load DATA into TWDR Register
 3d8:	eb eb       	ldi	r30, 0xBB	; 187
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	80 83       	st	Z, r24
  TWCR = (1<<TWINT) | (1<<TWEN);          // Clear TWINT bit in TWCR to start transmission of data
 3e0:	ec eb       	ldi	r30, 0xBC	; 188
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	84 e8       	ldi	r24, 0x84	; 132
 3e6:	80 83       	st	Z, r24
  while (!(TWCR & (1<<TWINT)));           // Wait for TWINT flag set. This indicates that the DATA has been transmitted, and ACK/NACK has been received
 3e8:	ec eb       	ldi	r30, 0xBC	; 188
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	88 23       	and	r24, r24
 3f0:	dc f7       	brge	.-10     	; 0x3e8 <twi_write+0x1c>
  TWI_S = (TWSR & 0xF8);
 3f2:	e9 eb       	ldi	r30, 0xB9	; 185
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	88 7f       	andi	r24, 0xF8	; 248
 3fa:	80 93 20 01 	sts	0x0120, r24
  if (TWI_S != MT_DATA_ACK)
 3fe:	80 91 20 01 	lds	r24, 0x0120
 402:	88 32       	cpi	r24, 0x28	; 40
 404:	19 f0       	breq	.+6      	; 0x40c <twi_write+0x40>
    return 1;
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	8a 83       	std	Y+2, r24	; 0x02
 40a:	01 c0       	rjmp	.+2      	; 0x40e <twi_write+0x42>
  else
    return 0;
 40c:	1a 82       	std	Y+2, r1	; 0x02
 40e:	8a 81       	ldd	r24, Y+2	; 0x02
}
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	cf 91       	pop	r28
 416:	df 91       	pop	r29
 418:	08 95       	ret

0000041a <rtc_write>:

char rtc_write(clock_buffer buf)
{
 41a:	df 93       	push	r29
 41c:	cf 93       	push	r28
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
 422:	28 97       	sbiw	r28, 0x08	; 8
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	f8 94       	cli
 428:	de bf       	out	0x3e, r29	; 62
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	cd bf       	out	0x3d, r28	; 61
 42e:	29 83       	std	Y+1, r18	; 0x01
 430:	3a 83       	std	Y+2, r19	; 0x02
 432:	4b 83       	std	Y+3, r20	; 0x03
 434:	5c 83       	std	Y+4, r21	; 0x04
 436:	6d 83       	std	Y+5, r22	; 0x05
 438:	7e 83       	std	Y+6, r23	; 0x06
 43a:	8f 83       	std	Y+7, r24	; 0x07
  if(twi_set_write() != 0)
 43c:	9c df       	rcall	.-200    	; 0x376 <twi_set_write>
 43e:	88 23       	and	r24, r24
 440:	19 f0       	breq	.+6      	; 0x448 <rtc_write+0x2e>
    return 8;
 442:	88 e0       	ldi	r24, 0x08	; 8
 444:	88 87       	std	Y+8, r24	; 0x08
 446:	35 c0       	rjmp	.+106    	; 0x4b2 <rtc_write+0x98>
  twi_write(0x00);                       // Base address for writing time data
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	c0 df       	rcall	.-128    	; 0x3cc <twi_write>
  
  if(twi_write(buf.seconds)!=0)
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	be df       	rcall	.-132    	; 0x3cc <twi_write>
 450:	88 23       	and	r24, r24
 452:	19 f0       	breq	.+6      	; 0x45a <rtc_write+0x40>
    return 7;
 454:	87 e0       	ldi	r24, 0x07	; 7
 456:	88 87       	std	Y+8, r24	; 0x08
 458:	2c c0       	rjmp	.+88     	; 0x4b2 <rtc_write+0x98>
  if(twi_write(buf.minutes)!=0)
 45a:	8a 81       	ldd	r24, Y+2	; 0x02
 45c:	b7 df       	rcall	.-146    	; 0x3cc <twi_write>
 45e:	88 23       	and	r24, r24
 460:	19 f0       	breq	.+6      	; 0x468 <rtc_write+0x4e>
    return 6;
 462:	86 e0       	ldi	r24, 0x06	; 6
 464:	88 87       	std	Y+8, r24	; 0x08
 466:	25 c0       	rjmp	.+74     	; 0x4b2 <rtc_write+0x98>
  if(twi_write(buf.hours)!=0)
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	b0 df       	rcall	.-160    	; 0x3cc <twi_write>
 46c:	88 23       	and	r24, r24
 46e:	19 f0       	breq	.+6      	; 0x476 <rtc_write+0x5c>
    return 5;
 470:	85 e0       	ldi	r24, 0x05	; 5
 472:	88 87       	std	Y+8, r24	; 0x08
 474:	1e c0       	rjmp	.+60     	; 0x4b2 <rtc_write+0x98>
  if(twi_write(buf.day)!=0)
 476:	8c 81       	ldd	r24, Y+4	; 0x04
 478:	a9 df       	rcall	.-174    	; 0x3cc <twi_write>
 47a:	88 23       	and	r24, r24
 47c:	19 f0       	breq	.+6      	; 0x484 <rtc_write+0x6a>
    return 4;
 47e:	84 e0       	ldi	r24, 0x04	; 4
 480:	88 87       	std	Y+8, r24	; 0x08
 482:	17 c0       	rjmp	.+46     	; 0x4b2 <rtc_write+0x98>
  if(twi_write(buf.date)!=0)
 484:	8d 81       	ldd	r24, Y+5	; 0x05
 486:	a2 df       	rcall	.-188    	; 0x3cc <twi_write>
 488:	88 23       	and	r24, r24
 48a:	19 f0       	breq	.+6      	; 0x492 <rtc_write+0x78>
    return 3;
 48c:	83 e0       	ldi	r24, 0x03	; 3
 48e:	88 87       	std	Y+8, r24	; 0x08
 490:	10 c0       	rjmp	.+32     	; 0x4b2 <rtc_write+0x98>
  if(twi_write(buf.month)!=0)
 492:	8e 81       	ldd	r24, Y+6	; 0x06
 494:	9b df       	rcall	.-202    	; 0x3cc <twi_write>
 496:	88 23       	and	r24, r24
 498:	19 f0       	breq	.+6      	; 0x4a0 <rtc_write+0x86>
    return 2;
 49a:	82 e0       	ldi	r24, 0x02	; 2
 49c:	88 87       	std	Y+8, r24	; 0x08
 49e:	09 c0       	rjmp	.+18     	; 0x4b2 <rtc_write+0x98>
  if(twi_write(buf.year)!=0)
 4a0:	8f 81       	ldd	r24, Y+7	; 0x07
 4a2:	94 df       	rcall	.-216    	; 0x3cc <twi_write>
 4a4:	88 23       	and	r24, r24
 4a6:	19 f0       	breq	.+6      	; 0x4ae <rtc_write+0x94>
    return 1;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	88 87       	std	Y+8, r24	; 0x08
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <rtc_write+0x98>
  
  twi_stop();
 4ae:	1a de       	rcall	.-972    	; 0xe4 <twi_stop>
  return 0;
 4b0:	18 86       	std	Y+8, r1	; 0x08
 4b2:	88 85       	ldd	r24, Y+8	; 0x08
}
 4b4:	28 96       	adiw	r28, 0x08	; 8
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	f8 94       	cli
 4ba:	de bf       	out	0x3e, r29	; 62
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	cd bf       	out	0x3d, r28	; 61
 4c0:	cf 91       	pop	r28
 4c2:	df 91       	pop	r29
 4c4:	08 95       	ret

000004c6 <twi_read_byte>:


int twi_read_byte(char addr)
{
 4c6:	df 93       	push	r29
 4c8:	cf 93       	push	r28
 4ca:	00 d0       	rcall	.+0      	; 0x4cc <twi_read_byte+0x6>
 4cc:	00 d0       	rcall	.+0      	; 0x4ce <twi_read_byte+0x8>
 4ce:	0f 92       	push	r0
 4d0:	cd b7       	in	r28, 0x3d	; 61
 4d2:	de b7       	in	r29, 0x3e	; 62
 4d4:	8b 83       	std	Y+3, r24	; 0x03
  int data = 0;
 4d6:	1a 82       	std	Y+2, r1	; 0x02
 4d8:	19 82       	std	Y+1, r1	; 0x01
  rtc_set_address(addr);
 4da:	8b 81       	ldd	r24, Y+3	; 0x03
 4dc:	0f de       	rcall	.-994    	; 0xfc <rtc_set_address>
  
  if(twi_set_read() != 0)
 4de:	23 de       	rcall	.-954    	; 0x126 <twi_set_read>
 4e0:	88 23       	and	r24, r24
 4e2:	29 f0       	breq	.+10     	; 0x4ee <twi_read_byte+0x28>
    return ((1<<8) | 0x00);
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	9d 83       	std	Y+5, r25	; 0x05
 4ea:	8c 83       	std	Y+4, r24	; 0x04
 4ec:	09 c0       	rjmp	.+18     	; 0x500 <__stack+0x1>

  data = twi_read(0);
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	45 de       	rcall	.-886    	; 0x17c <twi_read>
 4f2:	9a 83       	std	Y+2, r25	; 0x02
 4f4:	89 83       	std	Y+1, r24	; 0x01
  twi_stop();
 4f6:	f6 dd       	rcall	.-1044   	; 0xe4 <twi_stop>
  
  return data;  
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
 4fa:	9a 81       	ldd	r25, Y+2	; 0x02
 4fc:	9d 83       	std	Y+5, r25	; 0x05
 4fe:	8c 83       	std	Y+4, r24	; 0x04
 500:	8c 81       	ldd	r24, Y+4	; 0x04
 502:	9d 81       	ldd	r25, Y+5	; 0x05
}
 504:	0f 90       	pop	r0
 506:	0f 90       	pop	r0
 508:	0f 90       	pop	r0
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	cf 91       	pop	r28
 510:	df 91       	pop	r29
 512:	08 95       	ret

00000514 <twi_write_byte>:

char twi_write_byte(char addr, char data)
{
 514:	df 93       	push	r29
 516:	cf 93       	push	r28
 518:	00 d0       	rcall	.+0      	; 0x51a <twi_write_byte+0x6>
 51a:	0f 92       	push	r0
 51c:	cd b7       	in	r28, 0x3d	; 61
 51e:	de b7       	in	r29, 0x3e	; 62
 520:	89 83       	std	Y+1, r24	; 0x01
 522:	6a 83       	std	Y+2, r22	; 0x02
  if(twi_set_write() != 0)
 524:	28 df       	rcall	.-432    	; 0x376 <twi_set_write>
 526:	88 23       	and	r24, r24
 528:	19 f0       	breq	.+6      	; 0x530 <twi_write_byte+0x1c>
    return 2;
 52a:	82 e0       	ldi	r24, 0x02	; 2
 52c:	8b 83       	std	Y+3, r24	; 0x03
 52e:	0b c0       	rjmp	.+22     	; 0x546 <twi_write_byte+0x32>
  
  twi_write(addr);                       // Base address for writing time data
 530:	89 81       	ldd	r24, Y+1	; 0x01
 532:	4c df       	rcall	.-360    	; 0x3cc <twi_write>
  
  if(twi_write(data)!=0)
 534:	8a 81       	ldd	r24, Y+2	; 0x02
 536:	4a df       	rcall	.-364    	; 0x3cc <twi_write>
 538:	88 23       	and	r24, r24
 53a:	19 f0       	breq	.+6      	; 0x542 <twi_write_byte+0x2e>
    return 1;
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	8b 83       	std	Y+3, r24	; 0x03
 540:	02 c0       	rjmp	.+4      	; 0x546 <twi_write_byte+0x32>

  twi_stop();
 542:	d0 dd       	rcall	.-1120   	; 0xe4 <twi_stop>
  return 0;
 544:	1b 82       	std	Y+3, r1	; 0x03
 546:	8b 81       	ldd	r24, Y+3	; 0x03
}
 548:	0f 90       	pop	r0
 54a:	0f 90       	pop	r0
 54c:	0f 90       	pop	r0
 54e:	cf 91       	pop	r28
 550:	df 91       	pop	r29
 552:	08 95       	ret

00000554 <to_bcd>:
char seconds = 0;

clock_buffer clock = {0};

char to_bcd(char nr)
{
 554:	df 93       	push	r29
 556:	cf 93       	push	r28
 558:	0f 92       	push	r0
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
 55e:	89 83       	std	Y+1, r24	; 0x01
  return ( ((nr/10)<<4) | (nr%10) );
 560:	89 81       	ldd	r24, Y+1	; 0x01
 562:	9a e0       	ldi	r25, 0x0A	; 10
 564:	69 2f       	mov	r22, r25
 566:	d7 d3       	rcall	.+1966   	; 0xd16 <__divmodqi4>
 568:	99 27       	eor	r25, r25
 56a:	87 fd       	sbrc	r24, 7
 56c:	90 95       	com	r25
 56e:	82 95       	swap	r24
 570:	92 95       	swap	r25
 572:	90 7f       	andi	r25, 0xF0	; 240
 574:	98 27       	eor	r25, r24
 576:	80 7f       	andi	r24, 0xF0	; 240
 578:	98 27       	eor	r25, r24
 57a:	28 2f       	mov	r18, r24
 57c:	89 81       	ldd	r24, Y+1	; 0x01
 57e:	9a e0       	ldi	r25, 0x0A	; 10
 580:	69 2f       	mov	r22, r25
 582:	c9 d3       	rcall	.+1938   	; 0xd16 <__divmodqi4>
 584:	89 2f       	mov	r24, r25
 586:	82 2b       	or	r24, r18
}
 588:	0f 90       	pop	r0
 58a:	cf 91       	pop	r28
 58c:	df 91       	pop	r29
 58e:	08 95       	ret

00000590 <from_bcd>:

char from_bcd(char nr)
{
 590:	df 93       	push	r29
 592:	cf 93       	push	r28
 594:	0f 92       	push	r0
 596:	cd b7       	in	r28, 0x3d	; 61
 598:	de b7       	in	r29, 0x3e	; 62
 59a:	89 83       	std	Y+1, r24	; 0x01
  return ( ((nr>>4)*10) + (nr & 0x0F) );
 59c:	89 81       	ldd	r24, Y+1	; 0x01
 59e:	85 95       	asr	r24
 5a0:	85 95       	asr	r24
 5a2:	85 95       	asr	r24
 5a4:	85 95       	asr	r24
 5a6:	99 27       	eor	r25, r25
 5a8:	87 fd       	sbrc	r24, 7
 5aa:	90 95       	com	r25
 5ac:	9c 01       	movw	r18, r24
 5ae:	22 0f       	add	r18, r18
 5b0:	33 1f       	adc	r19, r19
 5b2:	c9 01       	movw	r24, r18
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	82 0f       	add	r24, r18
 5be:	93 1f       	adc	r25, r19
 5c0:	98 2f       	mov	r25, r24
 5c2:	89 81       	ldd	r24, Y+1	; 0x01
 5c4:	8f 70       	andi	r24, 0x0F	; 15
 5c6:	89 0f       	add	r24, r25
}
 5c8:	0f 90       	pop	r0
 5ca:	cf 91       	pop	r28
 5cc:	df 91       	pop	r29
 5ce:	08 95       	ret

000005d0 <bcd_inc>:
//{
//  return;
//}

char bcd_inc(char nr)
{
 5d0:	df 93       	push	r29
 5d2:	cf 93       	push	r28
 5d4:	0f 92       	push	r0
 5d6:	cd b7       	in	r28, 0x3d	; 61
 5d8:	de b7       	in	r29, 0x3e	; 62
 5da:	89 83       	std	Y+1, r24	; 0x01
  nr++;
 5dc:	89 81       	ldd	r24, Y+1	; 0x01
 5de:	8f 5f       	subi	r24, 0xFF	; 255
 5e0:	89 83       	std	Y+1, r24	; 0x01
  if((nr & 0x0F) == 0x0A)
 5e2:	89 81       	ldd	r24, Y+1	; 0x01
 5e4:	99 27       	eor	r25, r25
 5e6:	87 fd       	sbrc	r24, 7
 5e8:	90 95       	com	r25
 5ea:	8f 70       	andi	r24, 0x0F	; 15
 5ec:	90 70       	andi	r25, 0x00	; 0
 5ee:	8a 30       	cpi	r24, 0x0A	; 10
 5f0:	91 05       	cpc	r25, r1
 5f2:	19 f4       	brne	.+6      	; 0x5fa <bcd_inc+0x2a>
    nr += 6;
 5f4:	89 81       	ldd	r24, Y+1	; 0x01
 5f6:	8a 5f       	subi	r24, 0xFA	; 250
 5f8:	89 83       	std	Y+1, r24	; 0x01
  if(nr > 99)
 5fa:	89 81       	ldd	r24, Y+1	; 0x01
 5fc:	84 36       	cpi	r24, 0x64	; 100
 5fe:	0c f0       	brlt	.+2      	; 0x602 <bcd_inc+0x32>
    nr = 0;
 600:	19 82       	std	Y+1, r1	; 0x01
  return nr;
 602:	89 81       	ldd	r24, Y+1	; 0x01
}
 604:	0f 90       	pop	r0
 606:	cf 91       	pop	r28
 608:	df 91       	pop	r29
 60a:	08 95       	ret

0000060c <bcd_dec>:

char bcd_dec(char nr)
{
 60c:	df 93       	push	r29
 60e:	cf 93       	push	r28
 610:	0f 92       	push	r0
 612:	cd b7       	in	r28, 0x3d	; 61
 614:	de b7       	in	r29, 0x3e	; 62
 616:	89 83       	std	Y+1, r24	; 0x01
  nr--;
 618:	89 81       	ldd	r24, Y+1	; 0x01
 61a:	81 50       	subi	r24, 0x01	; 1
 61c:	89 83       	std	Y+1, r24	; 0x01
  if((nr & 0x0F) == 0x0F)
 61e:	89 81       	ldd	r24, Y+1	; 0x01
 620:	99 27       	eor	r25, r25
 622:	87 fd       	sbrc	r24, 7
 624:	90 95       	com	r25
 626:	8f 70       	andi	r24, 0x0F	; 15
 628:	90 70       	andi	r25, 0x00	; 0
 62a:	8f 30       	cpi	r24, 0x0F	; 15
 62c:	91 05       	cpc	r25, r1
 62e:	19 f4       	brne	.+6      	; 0x636 <bcd_dec+0x2a>
    nr -= 6;
 630:	89 81       	ldd	r24, Y+1	; 0x01
 632:	86 50       	subi	r24, 0x06	; 6
 634:	89 83       	std	Y+1, r24	; 0x01
  if(nr > 99)
 636:	89 81       	ldd	r24, Y+1	; 0x01
 638:	84 36       	cpi	r24, 0x64	; 100
 63a:	0c f0       	brlt	.+2      	; 0x63e <bcd_dec+0x32>
    nr = 0;
 63c:	19 82       	std	Y+1, r1	; 0x01
  return nr;
 63e:	89 81       	ldd	r24, Y+1	; 0x01
}
 640:	0f 90       	pop	r0
 642:	cf 91       	pop	r28
 644:	df 91       	pop	r29
 646:	08 95       	ret

00000648 <update_display>:

void update_display(char set)
{
 648:	df 93       	push	r29
 64a:	cf 93       	push	r28
 64c:	00 d0       	rcall	.+0      	; 0x64e <update_display+0x6>
 64e:	0f 92       	push	r0
 650:	cd b7       	in	r28, 0x3d	; 61
 652:	de b7       	in	r29, 0x3e	; 62
 654:	89 83       	std	Y+1, r24	; 0x01
  switch(set)
 656:	89 81       	ldd	r24, Y+1	; 0x01
 658:	28 2f       	mov	r18, r24
 65a:	33 27       	eor	r19, r19
 65c:	27 fd       	sbrc	r18, 7
 65e:	30 95       	com	r19
 660:	3b 83       	std	Y+3, r19	; 0x03
 662:	2a 83       	std	Y+2, r18	; 0x02
 664:	8a 81       	ldd	r24, Y+2	; 0x02
 666:	9b 81       	ldd	r25, Y+3	; 0x03
 668:	00 97       	sbiw	r24, 0x00	; 0
 66a:	39 f0       	breq	.+14     	; 0x67a <update_display+0x32>
 66c:	2a 81       	ldd	r18, Y+2	; 0x02
 66e:	3b 81       	ldd	r19, Y+3	; 0x03
 670:	21 30       	cpi	r18, 0x01	; 1
 672:	31 05       	cpc	r19, r1
 674:	09 f4       	brne	.+2      	; 0x678 <update_display+0x30>
 676:	5d c0       	rjmp	.+186    	; 0x732 <update_display+0xea>
 678:	b7 c0       	rjmp	.+366    	; 0x7e8 <update_display+0x1a0>
  {
    case DISPLAY_TIME :
      DISPLAY_DATA = nr[(clock.hours >> 4)];//display[0];
 67a:	a5 e2       	ldi	r26, 0x25	; 37
 67c:	b0 e0       	ldi	r27, 0x00	; 0
 67e:	80 91 28 01 	lds	r24, 0x0128
 682:	85 95       	asr	r24
 684:	85 95       	asr	r24
 686:	85 95       	asr	r24
 688:	85 95       	asr	r24
 68a:	99 27       	eor	r25, r25
 68c:	87 fd       	sbrc	r24, 7
 68e:	90 95       	com	r25
 690:	fc 01       	movw	r30, r24
 692:	e9 5f       	subi	r30, 0xF9	; 249
 694:	fe 4f       	sbci	r31, 0xFE	; 254
 696:	80 81       	ld	r24, Z
 698:	8c 93       	st	X, r24
      DISPLAY_LATCH = DLE1;
 69a:	eb e2       	ldi	r30, 0x2B	; 43
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	80 e1       	ldi	r24, 0x10	; 16
 6a0:	80 83       	st	Z, r24
      DISPLAY_LATCH = 0;
 6a2:	eb e2       	ldi	r30, 0x2B	; 43
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	10 82       	st	Z, r1

      DISPLAY_DATA = nr[(clock.hours & 0xF)];//display[1];
 6a8:	a5 e2       	ldi	r26, 0x25	; 37
 6aa:	b0 e0       	ldi	r27, 0x00	; 0
 6ac:	80 91 28 01 	lds	r24, 0x0128
 6b0:	99 27       	eor	r25, r25
 6b2:	87 fd       	sbrc	r24, 7
 6b4:	90 95       	com	r25
 6b6:	8f 70       	andi	r24, 0x0F	; 15
 6b8:	90 70       	andi	r25, 0x00	; 0
 6ba:	fc 01       	movw	r30, r24
 6bc:	e9 5f       	subi	r30, 0xF9	; 249
 6be:	fe 4f       	sbci	r31, 0xFE	; 254
 6c0:	80 81       	ld	r24, Z
 6c2:	8c 93       	st	X, r24
      DISPLAY_LATCH = DLE2;
 6c4:	eb e2       	ldi	r30, 0x2B	; 43
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 e2       	ldi	r24, 0x20	; 32
 6ca:	80 83       	st	Z, r24
      DISPLAY_LATCH = 0;
 6cc:	eb e2       	ldi	r30, 0x2B	; 43
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	10 82       	st	Z, r1

      DISPLAY_DATA = nr[(clock.minutes >> 4)];//display[2];
 6d2:	a5 e2       	ldi	r26, 0x25	; 37
 6d4:	b0 e0       	ldi	r27, 0x00	; 0
 6d6:	80 91 27 01 	lds	r24, 0x0127
 6da:	85 95       	asr	r24
 6dc:	85 95       	asr	r24
 6de:	85 95       	asr	r24
 6e0:	85 95       	asr	r24
 6e2:	99 27       	eor	r25, r25
 6e4:	87 fd       	sbrc	r24, 7
 6e6:	90 95       	com	r25
 6e8:	fc 01       	movw	r30, r24
 6ea:	e9 5f       	subi	r30, 0xF9	; 249
 6ec:	fe 4f       	sbci	r31, 0xFE	; 254
 6ee:	80 81       	ld	r24, Z
 6f0:	8c 93       	st	X, r24
      DISPLAY_LATCH = DLE3;
 6f2:	eb e2       	ldi	r30, 0x2B	; 43
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 e4       	ldi	r24, 0x40	; 64
 6f8:	80 83       	st	Z, r24
      DISPLAY_LATCH = 0;
 6fa:	eb e2       	ldi	r30, 0x2B	; 43
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	10 82       	st	Z, r1

      DISPLAY_DATA = nr[(clock.minutes & 0xF)];//display[3];
 700:	a5 e2       	ldi	r26, 0x25	; 37
 702:	b0 e0       	ldi	r27, 0x00	; 0
 704:	80 91 27 01 	lds	r24, 0x0127
 708:	99 27       	eor	r25, r25
 70a:	87 fd       	sbrc	r24, 7
 70c:	90 95       	com	r25
 70e:	8f 70       	andi	r24, 0x0F	; 15
 710:	90 70       	andi	r25, 0x00	; 0
 712:	fc 01       	movw	r30, r24
 714:	e9 5f       	subi	r30, 0xF9	; 249
 716:	fe 4f       	sbci	r31, 0xFE	; 254
 718:	80 81       	ld	r24, Z
 71a:	8c 93       	st	X, r24
      DISPLAY_LATCH = DLE4;
 71c:	eb e2       	ldi	r30, 0x2B	; 43
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	80 e8       	ldi	r24, 0x80	; 128
 722:	80 83       	st	Z, r24
      DISPLAY_LATCH = 0;
 724:	eb e2       	ldi	r30, 0x2B	; 43
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	10 82       	st	Z, r1

      DISPLAY_DATA = 0;
 72a:	e5 e2       	ldi	r30, 0x25	; 37
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	10 82       	st	Z, r1
 730:	5b c0       	rjmp	.+182    	; 0x7e8 <update_display+0x1a0>
      break;

    case DISPLAY_DATE :
      DISPLAY_DATA = nr[(clock.date >> 4)];//display[0];
 732:	a5 e2       	ldi	r26, 0x25	; 37
 734:	b0 e0       	ldi	r27, 0x00	; 0
 736:	80 91 2a 01 	lds	r24, 0x012A
 73a:	85 95       	asr	r24
 73c:	85 95       	asr	r24
 73e:	85 95       	asr	r24
 740:	85 95       	asr	r24
 742:	99 27       	eor	r25, r25
 744:	87 fd       	sbrc	r24, 7
 746:	90 95       	com	r25
 748:	fc 01       	movw	r30, r24
 74a:	e9 5f       	subi	r30, 0xF9	; 249
 74c:	fe 4f       	sbci	r31, 0xFE	; 254
 74e:	80 81       	ld	r24, Z
 750:	8c 93       	st	X, r24
      DISPLAY_LATCH = DLE1;
 752:	eb e2       	ldi	r30, 0x2B	; 43
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	80 e1       	ldi	r24, 0x10	; 16
 758:	80 83       	st	Z, r24
      DISPLAY_LATCH = 0;
 75a:	eb e2       	ldi	r30, 0x2B	; 43
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	10 82       	st	Z, r1

      DISPLAY_DATA = nr[(clock.date & 0xF)];//display[1];
 760:	a5 e2       	ldi	r26, 0x25	; 37
 762:	b0 e0       	ldi	r27, 0x00	; 0
 764:	80 91 2a 01 	lds	r24, 0x012A
 768:	99 27       	eor	r25, r25
 76a:	87 fd       	sbrc	r24, 7
 76c:	90 95       	com	r25
 76e:	8f 70       	andi	r24, 0x0F	; 15
 770:	90 70       	andi	r25, 0x00	; 0
 772:	fc 01       	movw	r30, r24
 774:	e9 5f       	subi	r30, 0xF9	; 249
 776:	fe 4f       	sbci	r31, 0xFE	; 254
 778:	80 81       	ld	r24, Z
 77a:	8c 93       	st	X, r24
      DISPLAY_LATCH = DLE2;
 77c:	eb e2       	ldi	r30, 0x2B	; 43
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	80 e2       	ldi	r24, 0x20	; 32
 782:	80 83       	st	Z, r24
      DISPLAY_LATCH = 0;
 784:	eb e2       	ldi	r30, 0x2B	; 43
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	10 82       	st	Z, r1

      DISPLAY_DATA = nr[(clock.month >> 4)];//display[2];
 78a:	a5 e2       	ldi	r26, 0x25	; 37
 78c:	b0 e0       	ldi	r27, 0x00	; 0
 78e:	80 91 2b 01 	lds	r24, 0x012B
 792:	85 95       	asr	r24
 794:	85 95       	asr	r24
 796:	85 95       	asr	r24
 798:	85 95       	asr	r24
 79a:	99 27       	eor	r25, r25
 79c:	87 fd       	sbrc	r24, 7
 79e:	90 95       	com	r25
 7a0:	fc 01       	movw	r30, r24
 7a2:	e9 5f       	subi	r30, 0xF9	; 249
 7a4:	fe 4f       	sbci	r31, 0xFE	; 254
 7a6:	80 81       	ld	r24, Z
 7a8:	8c 93       	st	X, r24
      DISPLAY_LATCH = DLE3;
 7aa:	eb e2       	ldi	r30, 0x2B	; 43
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	80 e4       	ldi	r24, 0x40	; 64
 7b0:	80 83       	st	Z, r24
      DISPLAY_LATCH = 0;
 7b2:	eb e2       	ldi	r30, 0x2B	; 43
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	10 82       	st	Z, r1

      DISPLAY_DATA = nr[(clock.month & 0xF)];//display[3];
 7b8:	a5 e2       	ldi	r26, 0x25	; 37
 7ba:	b0 e0       	ldi	r27, 0x00	; 0
 7bc:	80 91 2b 01 	lds	r24, 0x012B
 7c0:	99 27       	eor	r25, r25
 7c2:	87 fd       	sbrc	r24, 7
 7c4:	90 95       	com	r25
 7c6:	8f 70       	andi	r24, 0x0F	; 15
 7c8:	90 70       	andi	r25, 0x00	; 0
 7ca:	fc 01       	movw	r30, r24
 7cc:	e9 5f       	subi	r30, 0xF9	; 249
 7ce:	fe 4f       	sbci	r31, 0xFE	; 254
 7d0:	80 81       	ld	r24, Z
 7d2:	8c 93       	st	X, r24
      DISPLAY_LATCH = DLE4;
 7d4:	eb e2       	ldi	r30, 0x2B	; 43
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	80 e8       	ldi	r24, 0x80	; 128
 7da:	80 83       	st	Z, r24
      DISPLAY_LATCH = 0;
 7dc:	eb e2       	ldi	r30, 0x2B	; 43
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	10 82       	st	Z, r1

      DISPLAY_DATA = 0;
 7e2:	e5 e2       	ldi	r30, 0x25	; 37
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	10 82       	st	Z, r1
      break;

    default :
      break;
  }
}
 7e8:	0f 90       	pop	r0
 7ea:	0f 90       	pop	r0
 7ec:	0f 90       	pop	r0
 7ee:	cf 91       	pop	r28
 7f0:	df 91       	pop	r29
 7f2:	08 95       	ret

000007f4 <main>:


// ============== MAIN ===================

int main()
{
 7f4:	df 93       	push	r29
 7f6:	cf 93       	push	r28
 7f8:	cd b7       	in	r28, 0x3d	; 61
 7fa:	de b7       	in	r29, 0x3e	; 62
 7fc:	2c 97       	sbiw	r28, 0x0c	; 12
 7fe:	0f b6       	in	r0, 0x3f	; 63
 800:	f8 94       	cli
 802:	de bf       	out	0x3e, r29	; 62
 804:	0f be       	out	0x3f, r0	; 63
 806:	cd bf       	out	0x3d, r28	; 61
  // PORTS

  DDRB   = 0xFF;                    // PORTB = out
 808:	e4 e2       	ldi	r30, 0x24	; 36
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	8f ef       	ldi	r24, 0xFF	; 255
 80e:	80 83       	st	Z, r24
  PORTB  = 0xFF;
 810:	e5 e2       	ldi	r30, 0x25	; 37
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	8f ef       	ldi	r24, 0xFF	; 255
 816:	80 83       	st	Z, r24
  DDRD   = 0xF7;                    // PORTD : INT1 in, the rest out.
 818:	ea e2       	ldi	r30, 0x2A	; 42
 81a:	f0 e0       	ldi	r31, 0x00	; 0
 81c:	87 ef       	ldi	r24, 0xF7	; 247
 81e:	80 83       	st	Z, r24
  PORTD  = 0xFF;
 820:	eb e2       	ldi	r30, 0x2B	; 43
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	8f ef       	ldi	r24, 0xFF	; 255
 826:	80 83       	st	Z, r24
  DDRC   = 0x00;                    // PORTC = in
 828:	e7 e2       	ldi	r30, 0x27	; 39
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	10 82       	st	Z, r1
  PORTC  = (1<<4) | (1<<5);         // Enable internal pull-ups on SDA and SCL
 82e:	e8 e2       	ldi	r30, 0x28	; 40
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 e3       	ldi	r24, 0x30	; 48
 834:	80 83       	st	Z, r24

  // EXTERNAL INTERRUPTS

  //asm("cli");
  cli();
 836:	f8 94       	cli
  EICRA  = (1<<ISC11)|(1<<ISC10);
 838:	e9 e6       	ldi	r30, 0x69	; 105
 83a:	f0 e0       	ldi	r31, 0x00	; 0
 83c:	8c e0       	ldi	r24, 0x0C	; 12
 83e:	80 83       	st	Z, r24
  EIMSK |= (1<<INT1)|(0<<INT0);     // Enable external
 840:	ad e3       	ldi	r26, 0x3D	; 61
 842:	b0 e0       	ldi	r27, 0x00	; 0
 844:	ed e3       	ldi	r30, 0x3D	; 61
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	80 81       	ld	r24, Z
 84a:	82 60       	ori	r24, 0x02	; 2
 84c:	8c 93       	st	X, r24

  PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);
 84e:	ac e6       	ldi	r26, 0x6C	; 108
 850:	b0 e0       	ldi	r27, 0x00	; 0
 852:	ec e6       	ldi	r30, 0x6C	; 108
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	80 81       	ld	r24, Z
 858:	8f 60       	ori	r24, 0x0F	; 15
 85a:	8c 93       	st	X, r24
  PCICR |= (1<<PCIE1);              // Enable pin change interrupt 1
 85c:	a8 e6       	ldi	r26, 0x68	; 104
 85e:	b0 e0       	ldi	r27, 0x00	; 0
 860:	e8 e6       	ldi	r30, 0x68	; 104
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	80 81       	ld	r24, Z
 866:	82 60       	ori	r24, 0x02	; 2
 868:	8c 93       	st	X, r24

  //q = twi_write_byte(0,0);
  clock = rtc_read();
 86a:	d9 dc       	rcall	.-1614   	; 0x21e <rtc_read>
 86c:	29 83       	std	Y+1, r18	; 0x01
 86e:	3a 83       	std	Y+2, r19	; 0x02
 870:	4b 83       	std	Y+3, r20	; 0x03
 872:	5c 83       	std	Y+4, r21	; 0x04
 874:	6d 83       	std	Y+5, r22	; 0x05
 876:	7e 83       	std	Y+6, r23	; 0x06
 878:	8f 83       	std	Y+7, r24	; 0x07
 87a:	86 e2       	ldi	r24, 0x26	; 38
 87c:	91 e0       	ldi	r25, 0x01	; 1
 87e:	99 87       	std	Y+9, r25	; 0x09
 880:	88 87       	std	Y+8, r24	; 0x08
 882:	fe 01       	movw	r30, r28
 884:	31 96       	adiw	r30, 0x01	; 1
 886:	fb 87       	std	Y+11, r31	; 0x0b
 888:	ea 87       	std	Y+10, r30	; 0x0a
 88a:	f7 e0       	ldi	r31, 0x07	; 7
 88c:	fc 87       	std	Y+12, r31	; 0x0c
 88e:	ea 85       	ldd	r30, Y+10	; 0x0a
 890:	fb 85       	ldd	r31, Y+11	; 0x0b
 892:	00 80       	ld	r0, Z
 894:	8a 85       	ldd	r24, Y+10	; 0x0a
 896:	9b 85       	ldd	r25, Y+11	; 0x0b
 898:	01 96       	adiw	r24, 0x01	; 1
 89a:	9b 87       	std	Y+11, r25	; 0x0b
 89c:	8a 87       	std	Y+10, r24	; 0x0a
 89e:	e8 85       	ldd	r30, Y+8	; 0x08
 8a0:	f9 85       	ldd	r31, Y+9	; 0x09
 8a2:	00 82       	st	Z, r0
 8a4:	88 85       	ldd	r24, Y+8	; 0x08
 8a6:	99 85       	ldd	r25, Y+9	; 0x09
 8a8:	01 96       	adiw	r24, 0x01	; 1
 8aa:	99 87       	std	Y+9, r25	; 0x09
 8ac:	88 87       	std	Y+8, r24	; 0x08
 8ae:	9c 85       	ldd	r25, Y+12	; 0x0c
 8b0:	91 50       	subi	r25, 0x01	; 1
 8b2:	9c 87       	std	Y+12, r25	; 0x0c
 8b4:	ec 85       	ldd	r30, Y+12	; 0x0c
 8b6:	ee 23       	and	r30, r30
 8b8:	51 f7       	brne	.-44     	; 0x88e <main+0x9a>
  seconds = (clock.seconds >> 4) * 10 + (clock.seconds & 0xF);
 8ba:	80 91 26 01 	lds	r24, 0x0126
 8be:	85 95       	asr	r24
 8c0:	85 95       	asr	r24
 8c2:	85 95       	asr	r24
 8c4:	85 95       	asr	r24
 8c6:	99 27       	eor	r25, r25
 8c8:	87 fd       	sbrc	r24, 7
 8ca:	90 95       	com	r25
 8cc:	9c 01       	movw	r18, r24
 8ce:	22 0f       	add	r18, r18
 8d0:	33 1f       	adc	r19, r19
 8d2:	c9 01       	movw	r24, r18
 8d4:	88 0f       	add	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	88 0f       	add	r24, r24
 8da:	99 1f       	adc	r25, r25
 8dc:	82 0f       	add	r24, r18
 8de:	93 1f       	adc	r25, r19
 8e0:	98 2f       	mov	r25, r24
 8e2:	80 91 26 01 	lds	r24, 0x0126
 8e6:	8f 70       	andi	r24, 0x0F	; 15
 8e8:	89 0f       	add	r24, r25
 8ea:	80 93 25 01 	sts	0x0125, r24
  q = twi_write_byte(7,( 0<<OUT | 1<<SQWE | 0<<RS1 | 0<<RS0 )); // Set DS1307 square wave output on, freq = 1Hz
 8ee:	87 e0       	ldi	r24, 0x07	; 7
 8f0:	60 e1       	ldi	r22, 0x10	; 16
 8f2:	10 de       	rcall	.-992    	; 0x514 <twi_write_byte>
 8f4:	80 93 21 01 	sts	0x0121, r24

  update_display(DISPLAY_TIME);
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	a6 de       	rcall	.-692    	; 0x648 <update_display>

  //asm("sei");
  sei();
 8fc:	78 94       	sei
 8fe:	ff cf       	rjmp	.-2      	; 0x8fe <main+0x10a>

00000900 <__vector_2>:
}

// ============== INT ====================

ISR(INT1_vect)
{
 900:	1f 92       	push	r1
 902:	0f 92       	push	r0
 904:	0f b6       	in	r0, 0x3f	; 63
 906:	0f 92       	push	r0
 908:	11 24       	eor	r1, r1
 90a:	2f 93       	push	r18
 90c:	3f 93       	push	r19
 90e:	4f 93       	push	r20
 910:	5f 93       	push	r21
 912:	6f 93       	push	r22
 914:	7f 93       	push	r23
 916:	8f 93       	push	r24
 918:	9f 93       	push	r25
 91a:	af 93       	push	r26
 91c:	bf 93       	push	r27
 91e:	ef 93       	push	r30
 920:	ff 93       	push	r31
 922:	df 93       	push	r29
 924:	cf 93       	push	r28
 926:	cd b7       	in	r28, 0x3d	; 61
 928:	de b7       	in	r29, 0x3e	; 62
 92a:	2c 97       	sbiw	r28, 0x0c	; 12
 92c:	de bf       	out	0x3e, r29	; 62
 92e:	cd bf       	out	0x3d, r28	; 61
  // set up interrupt triggering :
  seconds++;
 930:	80 91 25 01 	lds	r24, 0x0125
 934:	8f 5f       	subi	r24, 0xFF	; 255
 936:	80 93 25 01 	sts	0x0125, r24

  if(seconds == 60)
 93a:	80 91 25 01 	lds	r24, 0x0125
 93e:	8c 33       	cpi	r24, 0x3C	; 60
 940:	09 f0       	breq	.+2      	; 0x944 <__vector_2+0x44>
 942:	44 c0       	rjmp	.+136    	; 0x9cc <__vector_2+0xcc>
  {
    clock = rtc_read();
 944:	6c dc       	rcall	.-1832   	; 0x21e <rtc_read>
 946:	29 83       	std	Y+1, r18	; 0x01
 948:	3a 83       	std	Y+2, r19	; 0x02
 94a:	4b 83       	std	Y+3, r20	; 0x03
 94c:	5c 83       	std	Y+4, r21	; 0x04
 94e:	6d 83       	std	Y+5, r22	; 0x05
 950:	7e 83       	std	Y+6, r23	; 0x06
 952:	8f 83       	std	Y+7, r24	; 0x07
 954:	86 e2       	ldi	r24, 0x26	; 38
 956:	91 e0       	ldi	r25, 0x01	; 1
 958:	99 87       	std	Y+9, r25	; 0x09
 95a:	88 87       	std	Y+8, r24	; 0x08
 95c:	fe 01       	movw	r30, r28
 95e:	31 96       	adiw	r30, 0x01	; 1
 960:	fb 87       	std	Y+11, r31	; 0x0b
 962:	ea 87       	std	Y+10, r30	; 0x0a
 964:	f7 e0       	ldi	r31, 0x07	; 7
 966:	fc 87       	std	Y+12, r31	; 0x0c
 968:	ea 85       	ldd	r30, Y+10	; 0x0a
 96a:	fb 85       	ldd	r31, Y+11	; 0x0b
 96c:	00 80       	ld	r0, Z
 96e:	8a 85       	ldd	r24, Y+10	; 0x0a
 970:	9b 85       	ldd	r25, Y+11	; 0x0b
 972:	01 96       	adiw	r24, 0x01	; 1
 974:	9b 87       	std	Y+11, r25	; 0x0b
 976:	8a 87       	std	Y+10, r24	; 0x0a
 978:	e8 85       	ldd	r30, Y+8	; 0x08
 97a:	f9 85       	ldd	r31, Y+9	; 0x09
 97c:	00 82       	st	Z, r0
 97e:	88 85       	ldd	r24, Y+8	; 0x08
 980:	99 85       	ldd	r25, Y+9	; 0x09
 982:	01 96       	adiw	r24, 0x01	; 1
 984:	99 87       	std	Y+9, r25	; 0x09
 986:	88 87       	std	Y+8, r24	; 0x08
 988:	9c 85       	ldd	r25, Y+12	; 0x0c
 98a:	91 50       	subi	r25, 0x01	; 1
 98c:	9c 87       	std	Y+12, r25	; 0x0c
 98e:	ec 85       	ldd	r30, Y+12	; 0x0c
 990:	ee 23       	and	r30, r30
 992:	51 f7       	brne	.-44     	; 0x968 <__vector_2+0x68>
    seconds = (clock.seconds >> 4) * 10 + (clock.seconds & 0xF);
 994:	80 91 26 01 	lds	r24, 0x0126
 998:	85 95       	asr	r24
 99a:	85 95       	asr	r24
 99c:	85 95       	asr	r24
 99e:	85 95       	asr	r24
 9a0:	99 27       	eor	r25, r25
 9a2:	87 fd       	sbrc	r24, 7
 9a4:	90 95       	com	r25
 9a6:	9c 01       	movw	r18, r24
 9a8:	22 0f       	add	r18, r18
 9aa:	33 1f       	adc	r19, r19
 9ac:	c9 01       	movw	r24, r18
 9ae:	88 0f       	add	r24, r24
 9b0:	99 1f       	adc	r25, r25
 9b2:	88 0f       	add	r24, r24
 9b4:	99 1f       	adc	r25, r25
 9b6:	82 0f       	add	r24, r18
 9b8:	93 1f       	adc	r25, r19
 9ba:	98 2f       	mov	r25, r24
 9bc:	80 91 26 01 	lds	r24, 0x0126
 9c0:	8f 70       	andi	r24, 0x0F	; 15
 9c2:	89 0f       	add	r24, r25
 9c4:	80 93 25 01 	sts	0x0125, r24
    update_display(DISPLAY_TIME);
 9c8:	80 e0       	ldi	r24, 0x00	; 0
 9ca:	3e de       	rcall	.-900    	; 0x648 <update_display>
  }
}
 9cc:	2c 96       	adiw	r28, 0x0c	; 12
 9ce:	de bf       	out	0x3e, r29	; 62
 9d0:	cd bf       	out	0x3d, r28	; 61
 9d2:	cf 91       	pop	r28
 9d4:	df 91       	pop	r29
 9d6:	ff 91       	pop	r31
 9d8:	ef 91       	pop	r30
 9da:	bf 91       	pop	r27
 9dc:	af 91       	pop	r26
 9de:	9f 91       	pop	r25
 9e0:	8f 91       	pop	r24
 9e2:	7f 91       	pop	r23
 9e4:	6f 91       	pop	r22
 9e6:	5f 91       	pop	r21
 9e8:	4f 91       	pop	r20
 9ea:	3f 91       	pop	r19
 9ec:	2f 91       	pop	r18
 9ee:	0f 90       	pop	r0
 9f0:	0f be       	out	0x3f, r0	; 63
 9f2:	0f 90       	pop	r0
 9f4:	1f 90       	pop	r1
 9f6:	18 95       	reti

000009f8 <__vector_4>:

ISR(PCINT1_vect)
{
 9f8:	1f 92       	push	r1
 9fa:	0f 92       	push	r0
 9fc:	0f b6       	in	r0, 0x3f	; 63
 9fe:	0f 92       	push	r0
 a00:	11 24       	eor	r1, r1
 a02:	2f 93       	push	r18
 a04:	3f 93       	push	r19
 a06:	4f 93       	push	r20
 a08:	5f 93       	push	r21
 a0a:	6f 93       	push	r22
 a0c:	7f 93       	push	r23
 a0e:	8f 93       	push	r24
 a10:	9f 93       	push	r25
 a12:	af 93       	push	r26
 a14:	bf 93       	push	r27
 a16:	ef 93       	push	r30
 a18:	ff 93       	push	r31
 a1a:	df 93       	push	r29
 a1c:	cf 93       	push	r28
 a1e:	00 d0       	rcall	.+0      	; 0xa20 <__vector_4+0x28>
 a20:	0f 92       	push	r0
 a22:	cd b7       	in	r28, 0x3d	; 61
 a24:	de b7       	in	r29, 0x3e	; 62
  char key = PINC & 0xF;
 a26:	e6 e2       	ldi	r30, 0x26	; 38
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	80 81       	ld	r24, Z
 a2c:	8f 70       	andi	r24, 0x0F	; 15
 a2e:	89 83       	std	Y+1, r24	; 0x01
  switch(key)
 a30:	89 81       	ldd	r24, Y+1	; 0x01
 a32:	28 2f       	mov	r18, r24
 a34:	33 27       	eor	r19, r19
 a36:	27 fd       	sbrc	r18, 7
 a38:	30 95       	com	r19
 a3a:	3b 83       	std	Y+3, r19	; 0x03
 a3c:	2a 83       	std	Y+2, r18	; 0x02
 a3e:	8a 81       	ldd	r24, Y+2	; 0x02
 a40:	9b 81       	ldd	r25, Y+3	; 0x03
 a42:	8e 30       	cpi	r24, 0x0E	; 14
 a44:	91 05       	cpc	r25, r1
 a46:	59 f0       	breq	.+22     	; 0xa5e <__vector_4+0x66>
 a48:	2a 81       	ldd	r18, Y+2	; 0x02
 a4a:	3b 81       	ldd	r19, Y+3	; 0x03
 a4c:	2f 30       	cpi	r18, 0x0F	; 15
 a4e:	31 05       	cpc	r19, r1
 a50:	81 f1       	breq	.+96     	; 0xab2 <__vector_4+0xba>
 a52:	8a 81       	ldd	r24, Y+2	; 0x02
 a54:	9b 81       	ldd	r25, Y+3	; 0x03
 a56:	8d 30       	cpi	r24, 0x0D	; 13
 a58:	91 05       	cpc	r25, r1
 a5a:	b1 f0       	breq	.+44     	; 0xa88 <__vector_4+0x90>
 a5c:	2c c0       	rjmp	.+88     	; 0xab6 <__vector_4+0xbe>
  {
    case 0xE :
      clock.minutes = bcd_inc(clock.minutes);
 a5e:	80 91 27 01 	lds	r24, 0x0127
 a62:	b6 dd       	rcall	.-1172   	; 0x5d0 <bcd_inc>
 a64:	80 93 27 01 	sts	0x0127, r24
      if(clock.minutes == 0x60)
 a68:	80 91 27 01 	lds	r24, 0x0127
 a6c:	80 36       	cpi	r24, 0x60	; 96
 a6e:	11 f4       	brne	.+4      	; 0xa74 <__vector_4+0x7c>
        clock.minutes = 0;
 a70:	10 92 27 01 	sts	0x0127, r1
      q = twi_write_byte(1,clock.minutes);
 a74:	90 91 27 01 	lds	r25, 0x0127
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	69 2f       	mov	r22, r25
 a7c:	4b dd       	rcall	.-1386   	; 0x514 <twi_write_byte>
 a7e:	80 93 21 01 	sts	0x0121, r24
      update_display(DISPLAY_TIME);
 a82:	80 e0       	ldi	r24, 0x00	; 0
 a84:	e1 dd       	rcall	.-1086   	; 0x648 <update_display>
 a86:	17 c0       	rjmp	.+46     	; 0xab6 <__vector_4+0xbe>
      break;

    case 0b1101 :
      clock.hours = bcd_inc(clock.hours);
 a88:	80 91 28 01 	lds	r24, 0x0128
 a8c:	a1 dd       	rcall	.-1214   	; 0x5d0 <bcd_inc>
 a8e:	80 93 28 01 	sts	0x0128, r24
      if(clock.hours == 0x24)
 a92:	80 91 28 01 	lds	r24, 0x0128
 a96:	84 32       	cpi	r24, 0x24	; 36
 a98:	11 f4       	brne	.+4      	; 0xa9e <__vector_4+0xa6>
        clock.hours = 0;
 a9a:	10 92 28 01 	sts	0x0128, r1
      q = twi_write_byte(2,clock.hours);
 a9e:	90 91 28 01 	lds	r25, 0x0128
 aa2:	82 e0       	ldi	r24, 0x02	; 2
 aa4:	69 2f       	mov	r22, r25
 aa6:	36 dd       	rcall	.-1428   	; 0x514 <twi_write_byte>
 aa8:	80 93 21 01 	sts	0x0121, r24
      update_display(DISPLAY_TIME);
 aac:	80 e0       	ldi	r24, 0x00	; 0
 aae:	cc dd       	rcall	.-1128   	; 0x648 <update_display>
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <__vector_4+0xbe>
      break;

    case 0xF :
      update_display(DISPLAY_TIME);
 ab2:	80 e0       	ldi	r24, 0x00	; 0
 ab4:	c9 dd       	rcall	.-1134   	; 0x648 <update_display>
      break;

    default : break;
  }
}
 ab6:	0f 90       	pop	r0
 ab8:	0f 90       	pop	r0
 aba:	0f 90       	pop	r0
 abc:	cf 91       	pop	r28
 abe:	df 91       	pop	r29
 ac0:	ff 91       	pop	r31
 ac2:	ef 91       	pop	r30
 ac4:	bf 91       	pop	r27
 ac6:	af 91       	pop	r26
 ac8:	9f 91       	pop	r25
 aca:	8f 91       	pop	r24
 acc:	7f 91       	pop	r23
 ace:	6f 91       	pop	r22
 ad0:	5f 91       	pop	r21
 ad2:	4f 91       	pop	r20
 ad4:	3f 91       	pop	r19
 ad6:	2f 91       	pop	r18
 ad8:	0f 90       	pop	r0
 ada:	0f be       	out	0x3f, r0	; 63
 adc:	0f 90       	pop	r0
 ade:	1f 90       	pop	r1
 ae0:	18 95       	reti

00000ae2 <__vector_11>:




ISR(TIMER1_COMPA_vect)
{
 ae2:	1f 92       	push	r1
 ae4:	0f 92       	push	r0
 ae6:	0f b6       	in	r0, 0x3f	; 63
 ae8:	0f 92       	push	r0
 aea:	11 24       	eor	r1, r1
 aec:	2f 93       	push	r18
 aee:	3f 93       	push	r19
 af0:	4f 93       	push	r20
 af2:	5f 93       	push	r21
 af4:	6f 93       	push	r22
 af6:	7f 93       	push	r23
 af8:	8f 93       	push	r24
 afa:	9f 93       	push	r25
 afc:	af 93       	push	r26
 afe:	bf 93       	push	r27
 b00:	ef 93       	push	r30
 b02:	ff 93       	push	r31
 b04:	df 93       	push	r29
 b06:	cf 93       	push	r28
 b08:	00 d0       	rcall	.+0      	; 0xb0a <__vector_11+0x28>
 b0a:	00 d0       	rcall	.+0      	; 0xb0c <__vector_11+0x2a>
 b0c:	cd b7       	in	r28, 0x3d	; 61
 b0e:	de b7       	in	r29, 0x3e	; 62
  TCNT1 = 0x00;
 b10:	e4 e8       	ldi	r30, 0x84	; 132
 b12:	f0 e0       	ldi	r31, 0x00	; 0
 b14:	11 82       	std	Z+1, r1	; 0x01
 b16:	10 82       	st	Z, r1
  keyboard = PINC & 0x0F;
 b18:	e6 e2       	ldi	r30, 0x26	; 38
 b1a:	f0 e0       	ldi	r31, 0x00	; 0
 b1c:	80 81       	ld	r24, Z
 b1e:	8f 70       	andi	r24, 0x0F	; 15
 b20:	80 93 22 01 	sts	0x0122, r24

  if(keyboard == 0x0F)
 b24:	80 91 22 01 	lds	r24, 0x0122
 b28:	8f 30       	cpi	r24, 0x0F	; 15
 b2a:	49 f4       	brne	.+18     	; 0xb3e <__vector_11+0x5c>
  {
    //set_display(DISPLAY_TIME);
    OCR1A = keyboard_poll;
 b2c:	e8 e8       	ldi	r30, 0x88	; 136
 b2e:	f0 e0       	ldi	r31, 0x00	; 0
 b30:	80 91 02 01 	lds	r24, 0x0102
 b34:	90 91 03 01 	lds	r25, 0x0103
 b38:	91 83       	std	Z+1, r25	; 0x01
 b3a:	80 83       	st	Z, r24
 b3c:	d5 c0       	rjmp	.+426    	; 0xce8 <__vector_11+0x206>
  }
  else
  {
    OCR1A = keyboard_delay;
 b3e:	e8 e8       	ldi	r30, 0x88	; 136
 b40:	f0 e0       	ldi	r31, 0x00	; 0
 b42:	80 91 04 01 	lds	r24, 0x0104
 b46:	90 91 05 01 	lds	r25, 0x0105
 b4a:	91 83       	std	Z+1, r25	; 0x01
 b4c:	80 83       	st	Z, r24
    switch(keyboard)
 b4e:	80 91 22 01 	lds	r24, 0x0122
 b52:	28 2f       	mov	r18, r24
 b54:	33 27       	eor	r19, r19
 b56:	27 fd       	sbrc	r18, 7
 b58:	30 95       	com	r19
 b5a:	3c 83       	std	Y+4, r19	; 0x04
 b5c:	2b 83       	std	Y+3, r18	; 0x03
 b5e:	8b 81       	ldd	r24, Y+3	; 0x03
 b60:	9c 81       	ldd	r25, Y+4	; 0x04
 b62:	8c 30       	cpi	r24, 0x0C	; 12
 b64:	91 05       	cpc	r25, r1
 b66:	e9 f1       	breq	.+122    	; 0xbe2 <__vector_11+0x100>
 b68:	2b 81       	ldd	r18, Y+3	; 0x03
 b6a:	3c 81       	ldd	r19, Y+4	; 0x04
 b6c:	2d 30       	cpi	r18, 0x0D	; 13
 b6e:	31 05       	cpc	r19, r1
 b70:	64 f4       	brge	.+24     	; 0xb8a <__vector_11+0xa8>
 b72:	8b 81       	ldd	r24, Y+3	; 0x03
 b74:	9c 81       	ldd	r25, Y+4	; 0x04
 b76:	8a 30       	cpi	r24, 0x0A	; 10
 b78:	91 05       	cpc	r25, r1
 b7a:	09 f4       	brne	.+2      	; 0xb7e <__vector_11+0x9c>
 b7c:	a2 c0       	rjmp	.+324    	; 0xcc2 <__vector_11+0x1e0>
 b7e:	2b 81       	ldd	r18, Y+3	; 0x03
 b80:	3c 81       	ldd	r19, Y+4	; 0x04
 b82:	2b 30       	cpi	r18, 0x0B	; 11
 b84:	31 05       	cpc	r19, r1
 b86:	d1 f0       	breq	.+52     	; 0xbbc <__vector_11+0xda>
 b88:	af c0       	rjmp	.+350    	; 0xce8 <__vector_11+0x206>
 b8a:	8b 81       	ldd	r24, Y+3	; 0x03
 b8c:	9c 81       	ldd	r25, Y+4	; 0x04
 b8e:	8d 30       	cpi	r24, 0x0D	; 13
 b90:	91 05       	cpc	r25, r1
 b92:	09 f0       	breq	.+2      	; 0xb96 <__vector_11+0xb4>
 b94:	a9 c0       	rjmp	.+338    	; 0xce8 <__vector_11+0x206>
//        set_display(DISPLAY_DATE);
        break;

      case 0x0D:
//        set_display(DISPLAY_TIME);
        clock.hours = bcd_inc(clock.hours);
 b96:	80 91 28 01 	lds	r24, 0x0128
 b9a:	1a dd       	rcall	.-1484   	; 0x5d0 <bcd_inc>
 b9c:	80 93 28 01 	sts	0x0128, r24
        if(clock.hours == 0x24)
 ba0:	80 91 28 01 	lds	r24, 0x0128
 ba4:	84 32       	cpi	r24, 0x24	; 36
 ba6:	11 f4       	brne	.+4      	; 0xbac <__vector_11+0xca>
          clock.hours = 0;
 ba8:	10 92 28 01 	sts	0x0128, r1
        q = twi_write_byte(2,clock.hours);
 bac:	90 91 28 01 	lds	r25, 0x0128
 bb0:	82 e0       	ldi	r24, 0x02	; 2
 bb2:	69 2f       	mov	r22, r25
 bb4:	af dc       	rcall	.-1698   	; 0x514 <twi_write_byte>
 bb6:	80 93 21 01 	sts	0x0121, r24
 bba:	96 c0       	rjmp	.+300    	; 0xce8 <__vector_11+0x206>
        break;

      case 0x0B:
//        set_display(DISPLAY_TIME);
        clock.minutes = bcd_inc(clock.minutes);
 bbc:	80 91 27 01 	lds	r24, 0x0127
 bc0:	07 dd       	rcall	.-1522   	; 0x5d0 <bcd_inc>
 bc2:	80 93 27 01 	sts	0x0127, r24
        if(clock.minutes == 0x60)
 bc6:	80 91 27 01 	lds	r24, 0x0127
 bca:	80 36       	cpi	r24, 0x60	; 96
 bcc:	11 f4       	brne	.+4      	; 0xbd2 <__vector_11+0xf0>
          clock.minutes = 0;
 bce:	10 92 27 01 	sts	0x0127, r1
        q = twi_write_byte(1,clock.minutes);
 bd2:	90 91 27 01 	lds	r25, 0x0127
 bd6:	81 e0       	ldi	r24, 0x01	; 1
 bd8:	69 2f       	mov	r22, r25
 bda:	9c dc       	rcall	.-1736   	; 0x514 <twi_write_byte>
 bdc:	80 93 21 01 	sts	0x0121, r24
 be0:	83 c0       	rjmp	.+262    	; 0xce8 <__vector_11+0x206>
        break;

      case 0x0C:
//        set_display(DISPLAY_DATE);
        clock.date = bcd_inc(clock.date);
 be2:	80 91 2a 01 	lds	r24, 0x012A
 be6:	f4 dc       	rcall	.-1560   	; 0x5d0 <bcd_inc>
 be8:	80 93 2a 01 	sts	0x012A, r24
        switch(clock.month)
 bec:	80 91 2b 01 	lds	r24, 0x012B
 bf0:	28 2f       	mov	r18, r24
 bf2:	33 27       	eor	r19, r19
 bf4:	27 fd       	sbrc	r18, 7
 bf6:	30 95       	com	r19
 bf8:	3a 83       	std	Y+2, r19	; 0x02
 bfa:	29 83       	std	Y+1, r18	; 0x01
 bfc:	89 81       	ldd	r24, Y+1	; 0x01
 bfe:	9a 81       	ldd	r25, Y+2	; 0x02
 c00:	89 30       	cpi	r24, 0x09	; 9
 c02:	91 05       	cpc	r25, r1
 c04:	2c f5       	brge	.+74     	; 0xc50 <__vector_11+0x16e>
 c06:	29 81       	ldd	r18, Y+1	; 0x01
 c08:	3a 81       	ldd	r19, Y+2	; 0x02
 c0a:	27 30       	cpi	r18, 0x07	; 7
 c0c:	31 05       	cpc	r19, r1
 c0e:	d4 f5       	brge	.+116    	; 0xc84 <__vector_11+0x1a2>
 c10:	89 81       	ldd	r24, Y+1	; 0x01
 c12:	9a 81       	ldd	r25, Y+2	; 0x02
 c14:	84 30       	cpi	r24, 0x04	; 4
 c16:	91 05       	cpc	r25, r1
 c18:	e9 f1       	breq	.+122    	; 0xc94 <__vector_11+0x1b2>
 c1a:	29 81       	ldd	r18, Y+1	; 0x01
 c1c:	3a 81       	ldd	r19, Y+2	; 0x02
 c1e:	25 30       	cpi	r18, 0x05	; 5
 c20:	31 05       	cpc	r19, r1
 c22:	5c f4       	brge	.+22     	; 0xc3a <__vector_11+0x158>
 c24:	89 81       	ldd	r24, Y+1	; 0x01
 c26:	9a 81       	ldd	r25, Y+2	; 0x02
 c28:	81 30       	cpi	r24, 0x01	; 1
 c2a:	91 05       	cpc	r25, r1
 c2c:	59 f1       	breq	.+86     	; 0xc84 <__vector_11+0x1a2>
 c2e:	29 81       	ldd	r18, Y+1	; 0x01
 c30:	3a 81       	ldd	r19, Y+2	; 0x02
 c32:	23 30       	cpi	r18, 0x03	; 3
 c34:	31 05       	cpc	r19, r1
 c36:	31 f1       	breq	.+76     	; 0xc84 <__vector_11+0x1a2>
 c38:	35 c0       	rjmp	.+106    	; 0xca4 <__vector_11+0x1c2>
 c3a:	89 81       	ldd	r24, Y+1	; 0x01
 c3c:	9a 81       	ldd	r25, Y+2	; 0x02
 c3e:	85 30       	cpi	r24, 0x05	; 5
 c40:	91 05       	cpc	r25, r1
 c42:	01 f1       	breq	.+64     	; 0xc84 <__vector_11+0x1a2>
 c44:	29 81       	ldd	r18, Y+1	; 0x01
 c46:	3a 81       	ldd	r19, Y+2	; 0x02
 c48:	26 30       	cpi	r18, 0x06	; 6
 c4a:	31 05       	cpc	r19, r1
 c4c:	19 f1       	breq	.+70     	; 0xc94 <__vector_11+0x1b2>
 c4e:	2a c0       	rjmp	.+84     	; 0xca4 <__vector_11+0x1c2>
 c50:	89 81       	ldd	r24, Y+1	; 0x01
 c52:	9a 81       	ldd	r25, Y+2	; 0x02
 c54:	80 31       	cpi	r24, 0x10	; 16
 c56:	91 05       	cpc	r25, r1
 c58:	a9 f0       	breq	.+42     	; 0xc84 <__vector_11+0x1a2>
 c5a:	29 81       	ldd	r18, Y+1	; 0x01
 c5c:	3a 81       	ldd	r19, Y+2	; 0x02
 c5e:	21 31       	cpi	r18, 0x11	; 17
 c60:	31 05       	cpc	r19, r1
 c62:	34 f4       	brge	.+12     	; 0xc70 <__vector_11+0x18e>
 c64:	89 81       	ldd	r24, Y+1	; 0x01
 c66:	9a 81       	ldd	r25, Y+2	; 0x02
 c68:	89 30       	cpi	r24, 0x09	; 9
 c6a:	91 05       	cpc	r25, r1
 c6c:	99 f0       	breq	.+38     	; 0xc94 <__vector_11+0x1b2>
 c6e:	1a c0       	rjmp	.+52     	; 0xca4 <__vector_11+0x1c2>
 c70:	29 81       	ldd	r18, Y+1	; 0x01
 c72:	3a 81       	ldd	r19, Y+2	; 0x02
 c74:	21 31       	cpi	r18, 0x11	; 17
 c76:	31 05       	cpc	r19, r1
 c78:	69 f0       	breq	.+26     	; 0xc94 <__vector_11+0x1b2>
 c7a:	89 81       	ldd	r24, Y+1	; 0x01
 c7c:	9a 81       	ldd	r25, Y+2	; 0x02
 c7e:	82 31       	cpi	r24, 0x12	; 18
 c80:	91 05       	cpc	r25, r1
 c82:	81 f4       	brne	.+32     	; 0xca4 <__vector_11+0x1c2>
        {
          case 0x01: case 0x03: case 0x05: case 0x07: case 0x08: case 0x10: case 0x12:
            if(clock.date == 0x32)
 c84:	80 91 2a 01 	lds	r24, 0x012A
 c88:	82 33       	cpi	r24, 0x32	; 50
 c8a:	99 f4       	brne	.+38     	; 0xcb2 <__vector_11+0x1d0>
              clock.date = 1;
 c8c:	81 e0       	ldi	r24, 0x01	; 1
 c8e:	80 93 2a 01 	sts	0x012A, r24
 c92:	0f c0       	rjmp	.+30     	; 0xcb2 <__vector_11+0x1d0>
            break;
          case 0x04: case 0x06: case 0x09: case 0x11:
            if(clock.date == 0x31)
 c94:	80 91 2a 01 	lds	r24, 0x012A
 c98:	81 33       	cpi	r24, 0x31	; 49
 c9a:	59 f4       	brne	.+22     	; 0xcb2 <__vector_11+0x1d0>
              clock.date = 1;
 c9c:	81 e0       	ldi	r24, 0x01	; 1
 c9e:	80 93 2a 01 	sts	0x012A, r24
 ca2:	07 c0       	rjmp	.+14     	; 0xcb2 <__vector_11+0x1d0>
            break;
          default :
            if(clock.date == 0x29)
 ca4:	80 91 2a 01 	lds	r24, 0x012A
 ca8:	89 32       	cpi	r24, 0x29	; 41
 caa:	19 f4       	brne	.+6      	; 0xcb2 <__vector_11+0x1d0>
              clock.date = 1;
 cac:	81 e0       	ldi	r24, 0x01	; 1
 cae:	80 93 2a 01 	sts	0x012A, r24
            break;
        }
        q = twi_write_byte(4,clock.date);
 cb2:	90 91 2a 01 	lds	r25, 0x012A
 cb6:	84 e0       	ldi	r24, 0x04	; 4
 cb8:	69 2f       	mov	r22, r25
 cba:	2c dc       	rcall	.-1960   	; 0x514 <twi_write_byte>
 cbc:	80 93 21 01 	sts	0x0121, r24
 cc0:	13 c0       	rjmp	.+38     	; 0xce8 <__vector_11+0x206>
        break;

      case 0x0A:
//        set_display(DISPLAY_DATE);
        clock.month = bcd_inc(clock.month);
 cc2:	80 91 2b 01 	lds	r24, 0x012B
 cc6:	84 dc       	rcall	.-1784   	; 0x5d0 <bcd_inc>
 cc8:	80 93 2b 01 	sts	0x012B, r24
        if(clock.month == 0x13)
 ccc:	80 91 2b 01 	lds	r24, 0x012B
 cd0:	83 31       	cpi	r24, 0x13	; 19
 cd2:	19 f4       	brne	.+6      	; 0xcda <__vector_11+0x1f8>
          clock.month = 1;
 cd4:	81 e0       	ldi	r24, 0x01	; 1
 cd6:	80 93 2b 01 	sts	0x012B, r24
        q = twi_write_byte(5,clock.month);
 cda:	90 91 2b 01 	lds	r25, 0x012B
 cde:	85 e0       	ldi	r24, 0x05	; 5
 ce0:	69 2f       	mov	r22, r25
 ce2:	18 dc       	rcall	.-2000   	; 0x514 <twi_write_byte>
 ce4:	80 93 21 01 	sts	0x0121, r24

      default :
        break;
    }
  }
}
 ce8:	0f 90       	pop	r0
 cea:	0f 90       	pop	r0
 cec:	0f 90       	pop	r0
 cee:	0f 90       	pop	r0
 cf0:	cf 91       	pop	r28
 cf2:	df 91       	pop	r29
 cf4:	ff 91       	pop	r31
 cf6:	ef 91       	pop	r30
 cf8:	bf 91       	pop	r27
 cfa:	af 91       	pop	r26
 cfc:	9f 91       	pop	r25
 cfe:	8f 91       	pop	r24
 d00:	7f 91       	pop	r23
 d02:	6f 91       	pop	r22
 d04:	5f 91       	pop	r21
 d06:	4f 91       	pop	r20
 d08:	3f 91       	pop	r19
 d0a:	2f 91       	pop	r18
 d0c:	0f 90       	pop	r0
 d0e:	0f be       	out	0x3f, r0	; 63
 d10:	0f 90       	pop	r0
 d12:	1f 90       	pop	r1
 d14:	18 95       	reti

00000d16 <__divmodqi4>:
 d16:	87 fb       	bst	r24, 7
 d18:	08 2e       	mov	r0, r24
 d1a:	06 26       	eor	r0, r22
 d1c:	87 fd       	sbrc	r24, 7
 d1e:	81 95       	neg	r24
 d20:	67 fd       	sbrc	r22, 7
 d22:	61 95       	neg	r22
 d24:	05 d0       	rcall	.+10     	; 0xd30 <__udivmodqi4>
 d26:	0e f4       	brtc	.+2      	; 0xd2a <__divmodqi4_1>
 d28:	91 95       	neg	r25

00000d2a <__divmodqi4_1>:
 d2a:	07 fc       	sbrc	r0, 7
 d2c:	81 95       	neg	r24

00000d2e <__divmodqi4_exit>:
 d2e:	08 95       	ret

00000d30 <__udivmodqi4>:
 d30:	99 1b       	sub	r25, r25
 d32:	79 e0       	ldi	r23, 0x09	; 9
 d34:	04 c0       	rjmp	.+8      	; 0xd3e <__udivmodqi4_ep>

00000d36 <__udivmodqi4_loop>:
 d36:	99 1f       	adc	r25, r25
 d38:	96 17       	cp	r25, r22
 d3a:	08 f0       	brcs	.+2      	; 0xd3e <__udivmodqi4_ep>
 d3c:	96 1b       	sub	r25, r22

00000d3e <__udivmodqi4_ep>:
 d3e:	88 1f       	adc	r24, r24
 d40:	7a 95       	dec	r23
 d42:	c9 f7       	brne	.-14     	; 0xd36 <__udivmodqi4_loop>
 d44:	80 95       	com	r24
 d46:	08 95       	ret

00000d48 <_exit>:
 d48:	f8 94       	cli

00000d4a <__stop_program>:
 d4a:	ff cf       	rjmp	.-2      	; 0xd4a <__stop_program>
