
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00000220  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080008e  0080008e  000002e2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000082  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000162  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000bc  00000000  00000000  000004e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000017b  00000000  00000000  000005a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000720  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000d3  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	ab c0       	rjmp	.+342    	; 0x16e <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e2       	ldi	r30, 0x20	; 32
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ae 38       	cpi	r26, 0x8E	; 142
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	ae e8       	ldi	r26, 0x8E	; 142
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 39       	cpi	r26, 0x90	; 144
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	81 d0       	rcall	.+258    	; 0x15c <main>
  5a:	e0 c0       	rjmp	.+448    	; 0x21c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <port_init>:

unsigned char tx_pos = 0;
unsigned char rx_pos = 0;

void port_init()
{
  5e:	df 93       	push	r29
  60:	cf 93       	push	r28
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
	DDRC = 0x3F;
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	8f e3       	ldi	r24, 0x3F	; 63
  6c:	80 83       	st	Z, r24
	PORTC = 0;
  6e:	e5 e3       	ldi	r30, 0x35	; 53
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	10 82       	st	Z, r1
}
  74:	cf 91       	pop	r28
  76:	df 91       	pop	r29
  78:	08 95       	ret

0000007a <uart_init>:

void uart_init()
{
  7a:	df 93       	push	r29
  7c:	cf 93       	push	r28
  7e:	cd b7       	in	r28, 0x3d	; 61
  80:	de b7       	in	r29, 0x3e	; 62
	UCSRA = (1<<U2X);
  82:	eb e2       	ldi	r30, 0x2B	; 43
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	80 83       	st	Z, r24
	UCSRB = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN);	// |(1<<TXCIE)
  8a:	ea e2       	ldi	r30, 0x2A	; 42
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	88 e9       	ldi	r24, 0x98	; 152
  90:	80 83       	st	Z, r24
	UBRRH = 0x02;
  92:	e0 e4       	ldi	r30, 0x40	; 64
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	80 83       	st	Z, r24
	UBRRL = 0x70;
  9a:	e9 e2       	ldi	r30, 0x29	; 41
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 e7       	ldi	r24, 0x70	; 112
  a0:	80 83       	st	Z, r24
}
  a2:	cf 91       	pop	r28
  a4:	df 91       	pop	r29
  a6:	08 95       	ret

000000a8 <send_message>:

void send_message(char *msg)
{
  a8:	df 93       	push	r29
  aa:	cf 93       	push	r28
  ac:	00 d0       	rcall	.+0      	; 0xae <send_message+0x6>
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	9a 83       	std	Y+2, r25	; 0x02
  b4:	89 83       	std	Y+1, r24	; 0x01
	strcpy(tx_buffer, msg);
  b6:	80 e6       	ldi	r24, 0x60	; 96
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	29 81       	ldd	r18, Y+1	; 0x01
  bc:	3a 81       	ldd	r19, Y+2	; 0x02
  be:	b9 01       	movw	r22, r18
  c0:	a6 d0       	rcall	.+332    	; 0x20e <strcpy>
	tx_pos = 0;
  c2:	10 92 8e 00 	sts	0x008E, r1
	do
	{
		UDR = tx_buffer[tx_pos];
  c6:	ac e2       	ldi	r26, 0x2C	; 44
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	80 91 8e 00 	lds	r24, 0x008E
  ce:	88 2f       	mov	r24, r24
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	e0 5a       	subi	r30, 0xA0	; 160
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	80 81       	ld	r24, Z
  da:	8c 93       	st	X, r24
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <send_message+0x38>
		while ( !( UCSRA & (1<<UDRE)) )
			__asm__ volatile("nop");		// so the endless loop isn't optimized away
  de:	00 00       	nop
	strcpy(tx_buffer, msg);
	tx_pos = 0;
	do
	{
		UDR = tx_buffer[tx_pos];
		while ( !( UCSRA & (1<<UDRE)) )
  e0:	eb e2       	ldi	r30, 0x2B	; 43
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	88 2f       	mov	r24, r24
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	80 72       	andi	r24, 0x20	; 32
  ec:	90 70       	andi	r25, 0x00	; 0
  ee:	00 97       	sbiw	r24, 0x00	; 0
  f0:	b1 f3       	breq	.-20     	; 0xde <send_message+0x36>
			__asm__ volatile("nop");		// so the endless loop isn't optimized away
		tx_pos++;
  f2:	80 91 8e 00 	lds	r24, 0x008E
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 8e 00 	sts	0x008E, r24
	}
	while( (tx_buffer[tx_pos-1] != '.') && (tx_pos < 16) );
  fc:	80 91 8e 00 	lds	r24, 0x008E
 100:	88 2f       	mov	r24, r24
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	fc 01       	movw	r30, r24
 108:	e0 5a       	subi	r30, 0xA0	; 160
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	80 81       	ld	r24, Z
 10e:	8e 32       	cpi	r24, 0x2E	; 46
 110:	21 f0       	breq	.+8      	; 0x11a <send_message+0x72>
 112:	80 91 8e 00 	lds	r24, 0x008E
 116:	80 31       	cpi	r24, 0x10	; 16
 118:	b0 f2       	brcs	.-84     	; 0xc6 <send_message+0x1e>
	PORTC = 2;
 11a:	e5 e3       	ldi	r30, 0x35	; 53
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	80 83       	st	Z, r24
}
 122:	0f 90       	pop	r0
 124:	0f 90       	pop	r0
 126:	cf 91       	pop	r28
 128:	df 91       	pop	r29
 12a:	08 95       	ret

0000012c <receive_message>:

void receive_message()
{
 12c:	df 93       	push	r29
 12e:	cf 93       	push	r28
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
	rx_pos = 0;
 134:	10 92 8f 00 	sts	0x008F, r1
	if(strcmp(rx_buffer, "hello.") == 0)
 138:	80 e7       	ldi	r24, 0x70	; 112
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	20 e8       	ldi	r18, 0x80	; 128
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	b9 01       	movw	r22, r18
 142:	5c d0       	rcall	.+184    	; 0x1fc <strcmp>
 144:	00 97       	sbiw	r24, 0x00	; 0
 146:	39 f4       	brne	.+14     	; 0x156 <receive_message+0x2a>
	{
		PORTC = 1;
 148:	e5 e3       	ldi	r30, 0x35	; 53
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 83       	st	Z, r24
		send_message("world.");
 150:	87 e8       	ldi	r24, 0x87	; 135
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	a9 df       	rcall	.-174    	; 0xa8 <send_message>
	}
}
 156:	cf 91       	pop	r28
 158:	df 91       	pop	r29
 15a:	08 95       	ret

0000015c <main>:
//*************************************************************
//*******************        MAIN           *******************
//*************************************************************

int main()
{
 15c:	df 93       	push	r29
 15e:	cf 93       	push	r28
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
	port_init();
 164:	7c df       	rcall	.-264    	; 0x5e <port_init>
	uart_init();
 166:	89 df       	rcall	.-238    	; 0x7a <uart_init>
	sei();
 168:	78 94       	sei

	while (1)
	{
		__asm__ volatile("nop");		// so the endless loop isn't optimized away
 16a:	00 00       	nop
 16c:	fe cf       	rjmp	.-4      	; 0x16a <main+0xe>

0000016e <__vector_11>:
//*************************************************************
//*******************      END  MAIN        *******************
//*************************************************************

ISR(USART_RXC_vect)
{
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	2f 93       	push	r18
 17a:	3f 93       	push	r19
 17c:	4f 93       	push	r20
 17e:	5f 93       	push	r21
 180:	6f 93       	push	r22
 182:	7f 93       	push	r23
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
 190:	df 93       	push	r29
 192:	cf 93       	push	r28
 194:	0f 92       	push	r0
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
	char data = UDR;
 19a:	ec e2       	ldi	r30, 0x2C	; 44
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	89 83       	std	Y+1, r24	; 0x01
	rx_buffer[rx_pos] = data;
 1a2:	80 91 8f 00 	lds	r24, 0x008F
 1a6:	88 2f       	mov	r24, r24
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	fc 01       	movw	r30, r24
 1ac:	e0 59       	subi	r30, 0x90	; 144
 1ae:	ff 4f       	sbci	r31, 0xFF	; 255
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	80 83       	st	Z, r24
	(rx_pos == 15) ? rx_pos = 0 : rx_pos++;	// should NEVER EVER EVER happen.
 1b4:	80 91 8f 00 	lds	r24, 0x008F
 1b8:	8f 30       	cpi	r24, 0x0F	; 15
 1ba:	19 f4       	brne	.+6      	; 0x1c2 <__vector_11+0x54>
 1bc:	10 92 8f 00 	sts	0x008F, r1
 1c0:	05 c0       	rjmp	.+10     	; 0x1cc <__vector_11+0x5e>
 1c2:	80 91 8f 00 	lds	r24, 0x008F
 1c6:	8f 5f       	subi	r24, 0xFF	; 255
 1c8:	80 93 8f 00 	sts	0x008F, r24
	if( data == '.' )
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	8e 32       	cpi	r24, 0x2E	; 46
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <__vector_11+0x66>
	{
		receive_message();
 1d2:	ac df       	rcall	.-168    	; 0x12c <receive_message>
	}
}
 1d4:	0f 90       	pop	r0
 1d6:	cf 91       	pop	r28
 1d8:	df 91       	pop	r29
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <strcmp>:
 1fc:	fb 01       	movw	r30, r22
 1fe:	dc 01       	movw	r26, r24
 200:	8d 91       	ld	r24, X+
 202:	01 90       	ld	r0, Z+
 204:	80 19       	sub	r24, r0
 206:	01 10       	cpse	r0, r1
 208:	d9 f3       	breq	.-10     	; 0x200 <strcmp+0x4>
 20a:	99 0b       	sbc	r25, r25
 20c:	08 95       	ret

0000020e <strcpy>:
 20e:	fb 01       	movw	r30, r22
 210:	dc 01       	movw	r26, r24
 212:	01 90       	ld	r0, Z+
 214:	0d 92       	st	X+, r0
 216:	00 20       	and	r0, r0
 218:	e1 f7       	brne	.-8      	; 0x212 <strcpy+0x4>
 21a:	08 95       	ret

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
